// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fsimage/fsimage.proto

/*
	Package hadoop_hdfs_fsimage is a generated protocol buffer package.

	It is generated from these files:
		fsimage/fsimage.proto

	It has these top-level messages:
		FileSummary
		NameSystemSection
		INodeSection
		FilesUnderConstructionSection
		INodeDirectorySection
		INodeReferenceSection
		SnapshotSection
		SnapshotDiffSection
		StringTableSection
		SecretManagerSection
		CacheManagerSection
*/
package hadoop_hdfs_fsimage

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import hadoop_hdfs "github.com/lomik/hdfs-fsimage-dump/pb/hadoop_hdfs"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type INodeSection_INode_Type int32

const (
	INodeSection_INode_FILE      INodeSection_INode_Type = 1
	INodeSection_INode_DIRECTORY INodeSection_INode_Type = 2
	INodeSection_INode_SYMLINK   INodeSection_INode_Type = 3
)

var INodeSection_INode_Type_name = map[int32]string{
	1: "FILE",
	2: "DIRECTORY",
	3: "SYMLINK",
}
var INodeSection_INode_Type_value = map[string]int32{
	"FILE":      1,
	"DIRECTORY": 2,
	"SYMLINK":   3,
}

func (x INodeSection_INode_Type) Enum() *INodeSection_INode_Type {
	p := new(INodeSection_INode_Type)
	*p = x
	return p
}
func (x INodeSection_INode_Type) String() string {
	return proto.EnumName(INodeSection_INode_Type_name, int32(x))
}
func (x *INodeSection_INode_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(INodeSection_INode_Type_value, data, "INodeSection_INode_Type")
	if err != nil {
		return err
	}
	*x = INodeSection_INode_Type(value)
	return nil
}
func (INodeSection_INode_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{2, 7, 0}
}

type SnapshotDiffSection_DiffEntry_Type int32

const (
	SnapshotDiffSection_DiffEntry_FILEDIFF      SnapshotDiffSection_DiffEntry_Type = 1
	SnapshotDiffSection_DiffEntry_DIRECTORYDIFF SnapshotDiffSection_DiffEntry_Type = 2
)

var SnapshotDiffSection_DiffEntry_Type_name = map[int32]string{
	1: "FILEDIFF",
	2: "DIRECTORYDIFF",
}
var SnapshotDiffSection_DiffEntry_Type_value = map[string]int32{
	"FILEDIFF":      1,
	"DIRECTORYDIFF": 2,
}

func (x SnapshotDiffSection_DiffEntry_Type) Enum() *SnapshotDiffSection_DiffEntry_Type {
	p := new(SnapshotDiffSection_DiffEntry_Type)
	*p = x
	return p
}
func (x SnapshotDiffSection_DiffEntry_Type) String() string {
	return proto.EnumName(SnapshotDiffSection_DiffEntry_Type_name, int32(x))
}
func (x *SnapshotDiffSection_DiffEntry_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SnapshotDiffSection_DiffEntry_Type_value, data, "SnapshotDiffSection_DiffEntry_Type")
	if err != nil {
		return err
	}
	*x = SnapshotDiffSection_DiffEntry_Type(value)
	return nil
}
func (SnapshotDiffSection_DiffEntry_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{7, 3, 0}
}

type FileSummary struct {
	// The version of the above EBNF grammars.
	OndiskVersion *uint32 `protobuf:"varint,1,req,name=ondiskVersion" json:"ondiskVersion,omitempty"`
	// layoutVersion describes which features are available in the
	// FSImage.
	LayoutVersion    *uint32                `protobuf:"varint,2,req,name=layoutVersion" json:"layoutVersion,omitempty"`
	Codec            *string                `protobuf:"bytes,3,opt,name=codec" json:"codec,omitempty"`
	Sections         []*FileSummary_Section `protobuf:"bytes,4,rep,name=sections" json:"sections,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *FileSummary) Reset()                    { *m = FileSummary{} }
func (m *FileSummary) String() string            { return proto.CompactTextString(m) }
func (*FileSummary) ProtoMessage()               {}
func (*FileSummary) Descriptor() ([]byte, []int) { return fileDescriptorFsimage, []int{0} }

func (m *FileSummary) GetOndiskVersion() uint32 {
	if m != nil && m.OndiskVersion != nil {
		return *m.OndiskVersion
	}
	return 0
}

func (m *FileSummary) GetLayoutVersion() uint32 {
	if m != nil && m.LayoutVersion != nil {
		return *m.LayoutVersion
	}
	return 0
}

func (m *FileSummary) GetCodec() string {
	if m != nil && m.Codec != nil {
		return *m.Codec
	}
	return ""
}

func (m *FileSummary) GetSections() []*FileSummary_Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

// index for each section
type FileSummary_Section struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Length           *uint64 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	Offset           *uint64 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FileSummary_Section) Reset()                    { *m = FileSummary_Section{} }
func (m *FileSummary_Section) String() string            { return proto.CompactTextString(m) }
func (*FileSummary_Section) ProtoMessage()               {}
func (*FileSummary_Section) Descriptor() ([]byte, []int) { return fileDescriptorFsimage, []int{0, 0} }

func (m *FileSummary_Section) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FileSummary_Section) GetLength() uint64 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

func (m *FileSummary_Section) GetOffset() uint64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

// *
// Name: NS_INFO
type NameSystemSection struct {
	NamespaceId             *uint32 `protobuf:"varint,1,opt,name=namespaceId" json:"namespaceId,omitempty"`
	GenstampV1              *uint64 `protobuf:"varint,2,opt,name=genstampV1" json:"genstampV1,omitempty"`
	GenstampV2              *uint64 `protobuf:"varint,3,opt,name=genstampV2" json:"genstampV2,omitempty"`
	GenstampV1Limit         *uint64 `protobuf:"varint,4,opt,name=genstampV1Limit" json:"genstampV1Limit,omitempty"`
	LastAllocatedBlockId    *uint64 `protobuf:"varint,5,opt,name=lastAllocatedBlockId" json:"lastAllocatedBlockId,omitempty"`
	TransactionId           *uint64 `protobuf:"varint,6,opt,name=transactionId" json:"transactionId,omitempty"`
	RollingUpgradeStartTime *uint64 `protobuf:"varint,7,opt,name=rollingUpgradeStartTime" json:"rollingUpgradeStartTime,omitempty"`
	XXX_unrecognized        []byte  `json:"-"`
}

func (m *NameSystemSection) Reset()                    { *m = NameSystemSection{} }
func (m *NameSystemSection) String() string            { return proto.CompactTextString(m) }
func (*NameSystemSection) ProtoMessage()               {}
func (*NameSystemSection) Descriptor() ([]byte, []int) { return fileDescriptorFsimage, []int{1} }

func (m *NameSystemSection) GetNamespaceId() uint32 {
	if m != nil && m.NamespaceId != nil {
		return *m.NamespaceId
	}
	return 0
}

func (m *NameSystemSection) GetGenstampV1() uint64 {
	if m != nil && m.GenstampV1 != nil {
		return *m.GenstampV1
	}
	return 0
}

func (m *NameSystemSection) GetGenstampV2() uint64 {
	if m != nil && m.GenstampV2 != nil {
		return *m.GenstampV2
	}
	return 0
}

func (m *NameSystemSection) GetGenstampV1Limit() uint64 {
	if m != nil && m.GenstampV1Limit != nil {
		return *m.GenstampV1Limit
	}
	return 0
}

func (m *NameSystemSection) GetLastAllocatedBlockId() uint64 {
	if m != nil && m.LastAllocatedBlockId != nil {
		return *m.LastAllocatedBlockId
	}
	return 0
}

func (m *NameSystemSection) GetTransactionId() uint64 {
	if m != nil && m.TransactionId != nil {
		return *m.TransactionId
	}
	return 0
}

func (m *NameSystemSection) GetRollingUpgradeStartTime() uint64 {
	if m != nil && m.RollingUpgradeStartTime != nil {
		return *m.RollingUpgradeStartTime
	}
	return 0
}

// *
// Permission is serialized as a 64-bit long. [0:24):[25:48):[48:64) (in Big Endian).
// The first and the second parts are the string ids of the user and
// group name, and the last 16 bits are the permission bits.
//
// Name: INODE
type INodeSection struct {
	LastInodeId      *uint64 `protobuf:"varint,1,opt,name=lastInodeId" json:"lastInodeId,omitempty"`
	NumInodes        *uint64 `protobuf:"varint,2,opt,name=numInodes" json:"numInodes,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *INodeSection) Reset()                    { *m = INodeSection{} }
func (m *INodeSection) String() string            { return proto.CompactTextString(m) }
func (*INodeSection) ProtoMessage()               {}
func (*INodeSection) Descriptor() ([]byte, []int) { return fileDescriptorFsimage, []int{2} }

func (m *INodeSection) GetLastInodeId() uint64 {
	if m != nil && m.LastInodeId != nil {
		return *m.LastInodeId
	}
	return 0
}

func (m *INodeSection) GetNumInodes() uint64 {
	if m != nil && m.NumInodes != nil {
		return *m.NumInodes
	}
	return 0
}

// *
// under-construction feature for INodeFile
type INodeSection_FileUnderConstructionFeature struct {
	ClientName       *string `protobuf:"bytes,1,opt,name=clientName" json:"clientName,omitempty"`
	ClientMachine    *string `protobuf:"bytes,2,opt,name=clientMachine" json:"clientMachine,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *INodeSection_FileUnderConstructionFeature) Reset() {
	*m = INodeSection_FileUnderConstructionFeature{}
}
func (m *INodeSection_FileUnderConstructionFeature) String() string { return proto.CompactTextString(m) }
func (*INodeSection_FileUnderConstructionFeature) ProtoMessage()    {}
func (*INodeSection_FileUnderConstructionFeature) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{2, 0}
}

func (m *INodeSection_FileUnderConstructionFeature) GetClientName() string {
	if m != nil && m.ClientName != nil {
		return *m.ClientName
	}
	return ""
}

func (m *INodeSection_FileUnderConstructionFeature) GetClientMachine() string {
	if m != nil && m.ClientMachine != nil {
		return *m.ClientMachine
	}
	return ""
}

type INodeSection_AclFeatureProto struct {
	// *
	// An ACL entry is represented by a 32-bit integer in Big Endian
	// format. The bits can be divided in four segments:
	// [0:2) || [2:26) || [26:27) || [27:29) || [29:32)
	//
	// [0:2) -- reserved for futute uses.
	// [2:26) -- the name of the entry, which is an ID that points to a
	// string in the StringTableSection.
	// [26:27) -- the scope of the entry (AclEntryScopeProto)
	// [27:29) -- the type of the entry (AclEntryTypeProto)
	// [29:32) -- the permission of the entry (FsActionProto)
	//
	Entries          []uint32 `protobuf:"fixed32,2,rep,packed,name=entries" json:"entries,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *INodeSection_AclFeatureProto) Reset()         { *m = INodeSection_AclFeatureProto{} }
func (m *INodeSection_AclFeatureProto) String() string { return proto.CompactTextString(m) }
func (*INodeSection_AclFeatureProto) ProtoMessage()    {}
func (*INodeSection_AclFeatureProto) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{2, 1}
}

func (m *INodeSection_AclFeatureProto) GetEntries() []uint32 {
	if m != nil {
		return m.Entries
	}
	return nil
}

type INodeSection_XAttrCompactProto struct {
	// *
	//
	// [0:2) -- the namespace of XAttr (XAttrNamespaceProto)
	// [2:26) -- the name of the entry, which is an ID that points to a
	// string in the StringTableSection.
	// [26:27) -- namespace extension. Originally there were only 4 namespaces
	// so only 2 bits were needed. At that time, this bit was reserved. When a
	// 5th namespace was created (raw) this bit became used as a 3rd namespace
	// bit.
	// [27:32) -- reserved for future uses.
	Name             *uint32 `protobuf:"fixed32,1,req,name=name" json:"name,omitempty"`
	Value            []byte  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *INodeSection_XAttrCompactProto) Reset()         { *m = INodeSection_XAttrCompactProto{} }
func (m *INodeSection_XAttrCompactProto) String() string { return proto.CompactTextString(m) }
func (*INodeSection_XAttrCompactProto) ProtoMessage()    {}
func (*INodeSection_XAttrCompactProto) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{2, 2}
}

func (m *INodeSection_XAttrCompactProto) GetName() uint32 {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return 0
}

func (m *INodeSection_XAttrCompactProto) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type INodeSection_XAttrFeatureProto struct {
	XAttrs           []*INodeSection_XAttrCompactProto `protobuf:"bytes,1,rep,name=xAttrs" json:"xAttrs,omitempty"`
	XXX_unrecognized []byte                            `json:"-"`
}

func (m *INodeSection_XAttrFeatureProto) Reset()         { *m = INodeSection_XAttrFeatureProto{} }
func (m *INodeSection_XAttrFeatureProto) String() string { return proto.CompactTextString(m) }
func (*INodeSection_XAttrFeatureProto) ProtoMessage()    {}
func (*INodeSection_XAttrFeatureProto) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{2, 3}
}

func (m *INodeSection_XAttrFeatureProto) GetXAttrs() []*INodeSection_XAttrCompactProto {
	if m != nil {
		return m.XAttrs
	}
	return nil
}

type INodeSection_INodeFile struct {
	Replication        *uint32                                    `protobuf:"varint,1,opt,name=replication" json:"replication,omitempty"`
	ModificationTime   *uint64                                    `protobuf:"varint,2,opt,name=modificationTime" json:"modificationTime,omitempty"`
	AccessTime         *uint64                                    `protobuf:"varint,3,opt,name=accessTime" json:"accessTime,omitempty"`
	PreferredBlockSize *uint64                                    `protobuf:"varint,4,opt,name=preferredBlockSize" json:"preferredBlockSize,omitempty"`
	Permission         *uint64                                    `protobuf:"fixed64,5,opt,name=permission" json:"permission,omitempty"`
	Blocks             []*hadoop_hdfs.BlockProto                  `protobuf:"bytes,6,rep,name=blocks" json:"blocks,omitempty"`
	FileUC             *INodeSection_FileUnderConstructionFeature `protobuf:"bytes,7,opt,name=fileUC" json:"fileUC,omitempty"`
	Acl                *INodeSection_AclFeatureProto              `protobuf:"bytes,8,opt,name=acl" json:"acl,omitempty"`
	XAttrs             *INodeSection_XAttrFeatureProto            `protobuf:"bytes,9,opt,name=xAttrs" json:"xAttrs,omitempty"`
	XXX_unrecognized   []byte                                     `json:"-"`
}

func (m *INodeSection_INodeFile) Reset()                    { *m = INodeSection_INodeFile{} }
func (m *INodeSection_INodeFile) String() string            { return proto.CompactTextString(m) }
func (*INodeSection_INodeFile) ProtoMessage()               {}
func (*INodeSection_INodeFile) Descriptor() ([]byte, []int) { return fileDescriptorFsimage, []int{2, 4} }

func (m *INodeSection_INodeFile) GetReplication() uint32 {
	if m != nil && m.Replication != nil {
		return *m.Replication
	}
	return 0
}

func (m *INodeSection_INodeFile) GetModificationTime() uint64 {
	if m != nil && m.ModificationTime != nil {
		return *m.ModificationTime
	}
	return 0
}

func (m *INodeSection_INodeFile) GetAccessTime() uint64 {
	if m != nil && m.AccessTime != nil {
		return *m.AccessTime
	}
	return 0
}

func (m *INodeSection_INodeFile) GetPreferredBlockSize() uint64 {
	if m != nil && m.PreferredBlockSize != nil {
		return *m.PreferredBlockSize
	}
	return 0
}

func (m *INodeSection_INodeFile) GetPermission() uint64 {
	if m != nil && m.Permission != nil {
		return *m.Permission
	}
	return 0
}

func (m *INodeSection_INodeFile) GetBlocks() []*hadoop_hdfs.BlockProto {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *INodeSection_INodeFile) GetFileUC() *INodeSection_FileUnderConstructionFeature {
	if m != nil {
		return m.FileUC
	}
	return nil
}

func (m *INodeSection_INodeFile) GetAcl() *INodeSection_AclFeatureProto {
	if m != nil {
		return m.Acl
	}
	return nil
}

func (m *INodeSection_INodeFile) GetXAttrs() *INodeSection_XAttrFeatureProto {
	if m != nil {
		return m.XAttrs
	}
	return nil
}

type INodeSection_INodeDirectory struct {
	ModificationTime *uint64 `protobuf:"varint,1,opt,name=modificationTime" json:"modificationTime,omitempty"`
	// namespace quota
	NsQuota *uint64 `protobuf:"varint,2,opt,name=nsQuota" json:"nsQuota,omitempty"`
	// diskspace quota
	DsQuota          *uint64                         `protobuf:"varint,3,opt,name=dsQuota" json:"dsQuota,omitempty"`
	Permission       *uint64                         `protobuf:"fixed64,4,opt,name=permission" json:"permission,omitempty"`
	Acl              *INodeSection_AclFeatureProto   `protobuf:"bytes,5,opt,name=acl" json:"acl,omitempty"`
	XAttrs           *INodeSection_XAttrFeatureProto `protobuf:"bytes,6,opt,name=xAttrs" json:"xAttrs,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *INodeSection_INodeDirectory) Reset()         { *m = INodeSection_INodeDirectory{} }
func (m *INodeSection_INodeDirectory) String() string { return proto.CompactTextString(m) }
func (*INodeSection_INodeDirectory) ProtoMessage()    {}
func (*INodeSection_INodeDirectory) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{2, 5}
}

func (m *INodeSection_INodeDirectory) GetModificationTime() uint64 {
	if m != nil && m.ModificationTime != nil {
		return *m.ModificationTime
	}
	return 0
}

func (m *INodeSection_INodeDirectory) GetNsQuota() uint64 {
	if m != nil && m.NsQuota != nil {
		return *m.NsQuota
	}
	return 0
}

func (m *INodeSection_INodeDirectory) GetDsQuota() uint64 {
	if m != nil && m.DsQuota != nil {
		return *m.DsQuota
	}
	return 0
}

func (m *INodeSection_INodeDirectory) GetPermission() uint64 {
	if m != nil && m.Permission != nil {
		return *m.Permission
	}
	return 0
}

func (m *INodeSection_INodeDirectory) GetAcl() *INodeSection_AclFeatureProto {
	if m != nil {
		return m.Acl
	}
	return nil
}

func (m *INodeSection_INodeDirectory) GetXAttrs() *INodeSection_XAttrFeatureProto {
	if m != nil {
		return m.XAttrs
	}
	return nil
}

type INodeSection_INodeSymlink struct {
	Permission       *uint64 `protobuf:"fixed64,1,opt,name=permission" json:"permission,omitempty"`
	Target           []byte  `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	ModificationTime *uint64 `protobuf:"varint,3,opt,name=modificationTime" json:"modificationTime,omitempty"`
	AccessTime       *uint64 `protobuf:"varint,4,opt,name=accessTime" json:"accessTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *INodeSection_INodeSymlink) Reset()         { *m = INodeSection_INodeSymlink{} }
func (m *INodeSection_INodeSymlink) String() string { return proto.CompactTextString(m) }
func (*INodeSection_INodeSymlink) ProtoMessage()    {}
func (*INodeSection_INodeSymlink) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{2, 6}
}

func (m *INodeSection_INodeSymlink) GetPermission() uint64 {
	if m != nil && m.Permission != nil {
		return *m.Permission
	}
	return 0
}

func (m *INodeSection_INodeSymlink) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *INodeSection_INodeSymlink) GetModificationTime() uint64 {
	if m != nil && m.ModificationTime != nil {
		return *m.ModificationTime
	}
	return 0
}

func (m *INodeSection_INodeSymlink) GetAccessTime() uint64 {
	if m != nil && m.AccessTime != nil {
		return *m.AccessTime
	}
	return 0
}

type INodeSection_INode struct {
	Type             *INodeSection_INode_Type     `protobuf:"varint,1,req,name=type,enum=hadoop.hdfs.fsimage.INodeSection_INode_Type" json:"type,omitempty"`
	Id               *uint64                      `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	Name             []byte                       `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	File             *INodeSection_INodeFile      `protobuf:"bytes,4,opt,name=file" json:"file,omitempty"`
	Directory        *INodeSection_INodeDirectory `protobuf:"bytes,5,opt,name=directory" json:"directory,omitempty"`
	Symlink          *INodeSection_INodeSymlink   `protobuf:"bytes,6,opt,name=symlink" json:"symlink,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *INodeSection_INode) Reset()                    { *m = INodeSection_INode{} }
func (m *INodeSection_INode) String() string            { return proto.CompactTextString(m) }
func (*INodeSection_INode) ProtoMessage()               {}
func (*INodeSection_INode) Descriptor() ([]byte, []int) { return fileDescriptorFsimage, []int{2, 7} }

func (m *INodeSection_INode) GetType() INodeSection_INode_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return INodeSection_INode_FILE
}

func (m *INodeSection_INode) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *INodeSection_INode) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *INodeSection_INode) GetFile() *INodeSection_INodeFile {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *INodeSection_INode) GetDirectory() *INodeSection_INodeDirectory {
	if m != nil {
		return m.Directory
	}
	return nil
}

func (m *INodeSection_INode) GetSymlink() *INodeSection_INodeSymlink {
	if m != nil {
		return m.Symlink
	}
	return nil
}

// *
// This section records information about under-construction files for
// reconstructing the lease map.
// NAME: FILES_UNDERCONSTRUCTION
type FilesUnderConstructionSection struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *FilesUnderConstructionSection) Reset()         { *m = FilesUnderConstructionSection{} }
func (m *FilesUnderConstructionSection) String() string { return proto.CompactTextString(m) }
func (*FilesUnderConstructionSection) ProtoMessage()    {}
func (*FilesUnderConstructionSection) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{3}
}

type FilesUnderConstructionSection_FileUnderConstructionEntry struct {
	InodeId          *uint64 `protobuf:"varint,1,opt,name=inodeId" json:"inodeId,omitempty"`
	FullPath         *string `protobuf:"bytes,2,opt,name=fullPath" json:"fullPath,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FilesUnderConstructionSection_FileUnderConstructionEntry) Reset() {
	*m = FilesUnderConstructionSection_FileUnderConstructionEntry{}
}
func (m *FilesUnderConstructionSection_FileUnderConstructionEntry) String() string {
	return proto.CompactTextString(m)
}
func (*FilesUnderConstructionSection_FileUnderConstructionEntry) ProtoMessage() {}
func (*FilesUnderConstructionSection_FileUnderConstructionEntry) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{3, 0}
}

func (m *FilesUnderConstructionSection_FileUnderConstructionEntry) GetInodeId() uint64 {
	if m != nil && m.InodeId != nil {
		return *m.InodeId
	}
	return 0
}

func (m *FilesUnderConstructionSection_FileUnderConstructionEntry) GetFullPath() string {
	if m != nil && m.FullPath != nil {
		return *m.FullPath
	}
	return ""
}

// *
// This section records the children of each directories
// NAME: INODE_DIR
type INodeDirectorySection struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *INodeDirectorySection) Reset()                    { *m = INodeDirectorySection{} }
func (m *INodeDirectorySection) String() string            { return proto.CompactTextString(m) }
func (*INodeDirectorySection) ProtoMessage()               {}
func (*INodeDirectorySection) Descriptor() ([]byte, []int) { return fileDescriptorFsimage, []int{4} }

// *
// A single DirEntry needs to fit in the default PB max message size of
// 64MB. Please be careful when adding more fields to a DirEntry!
type INodeDirectorySection_DirEntry struct {
	Parent *uint64 `protobuf:"varint,1,opt,name=parent" json:"parent,omitempty"`
	// children that are not reference nodes
	Children []uint64 `protobuf:"varint,2,rep,packed,name=children" json:"children,omitempty"`
	// children that are reference nodes, each element is a reference node id
	RefChildren      []uint32 `protobuf:"varint,3,rep,packed,name=refChildren" json:"refChildren,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *INodeDirectorySection_DirEntry) Reset()         { *m = INodeDirectorySection_DirEntry{} }
func (m *INodeDirectorySection_DirEntry) String() string { return proto.CompactTextString(m) }
func (*INodeDirectorySection_DirEntry) ProtoMessage()    {}
func (*INodeDirectorySection_DirEntry) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{4, 0}
}

func (m *INodeDirectorySection_DirEntry) GetParent() uint64 {
	if m != nil && m.Parent != nil {
		return *m.Parent
	}
	return 0
}

func (m *INodeDirectorySection_DirEntry) GetChildren() []uint64 {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *INodeDirectorySection_DirEntry) GetRefChildren() []uint32 {
	if m != nil {
		return m.RefChildren
	}
	return nil
}

type INodeReferenceSection struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *INodeReferenceSection) Reset()                    { *m = INodeReferenceSection{} }
func (m *INodeReferenceSection) String() string            { return proto.CompactTextString(m) }
func (*INodeReferenceSection) ProtoMessage()               {}
func (*INodeReferenceSection) Descriptor() ([]byte, []int) { return fileDescriptorFsimage, []int{5} }

type INodeReferenceSection_INodeReference struct {
	// id of the referred inode
	ReferredId *uint64 `protobuf:"varint,1,opt,name=referredId" json:"referredId,omitempty"`
	// local name recorded in WithName
	Name []byte `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// recorded in DstReference
	DstSnapshotId *uint32 `protobuf:"varint,3,opt,name=dstSnapshotId" json:"dstSnapshotId,omitempty"`
	// recorded in WithName
	LastSnapshotId   *uint32 `protobuf:"varint,4,opt,name=lastSnapshotId" json:"lastSnapshotId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *INodeReferenceSection_INodeReference) Reset()         { *m = INodeReferenceSection_INodeReference{} }
func (m *INodeReferenceSection_INodeReference) String() string { return proto.CompactTextString(m) }
func (*INodeReferenceSection_INodeReference) ProtoMessage()    {}
func (*INodeReferenceSection_INodeReference) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{5, 0}
}

func (m *INodeReferenceSection_INodeReference) GetReferredId() uint64 {
	if m != nil && m.ReferredId != nil {
		return *m.ReferredId
	}
	return 0
}

func (m *INodeReferenceSection_INodeReference) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *INodeReferenceSection_INodeReference) GetDstSnapshotId() uint32 {
	if m != nil && m.DstSnapshotId != nil {
		return *m.DstSnapshotId
	}
	return 0
}

func (m *INodeReferenceSection_INodeReference) GetLastSnapshotId() uint32 {
	if m != nil && m.LastSnapshotId != nil {
		return *m.LastSnapshotId
	}
	return 0
}

// *
// This section records the information about snapshot
// NAME: SNAPSHOT
type SnapshotSection struct {
	SnapshotCounter  *uint32  `protobuf:"varint,1,opt,name=snapshotCounter" json:"snapshotCounter,omitempty"`
	SnapshottableDir []uint64 `protobuf:"varint,2,rep,packed,name=snapshottableDir" json:"snapshottableDir,omitempty"`
	// total number of snapshots
	NumSnapshots     *uint32 `protobuf:"varint,3,opt,name=numSnapshots" json:"numSnapshots,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SnapshotSection) Reset()                    { *m = SnapshotSection{} }
func (m *SnapshotSection) String() string            { return proto.CompactTextString(m) }
func (*SnapshotSection) ProtoMessage()               {}
func (*SnapshotSection) Descriptor() ([]byte, []int) { return fileDescriptorFsimage, []int{6} }

func (m *SnapshotSection) GetSnapshotCounter() uint32 {
	if m != nil && m.SnapshotCounter != nil {
		return *m.SnapshotCounter
	}
	return 0
}

func (m *SnapshotSection) GetSnapshottableDir() []uint64 {
	if m != nil {
		return m.SnapshottableDir
	}
	return nil
}

func (m *SnapshotSection) GetNumSnapshots() uint32 {
	if m != nil && m.NumSnapshots != nil {
		return *m.NumSnapshots
	}
	return 0
}

type SnapshotSection_Snapshot struct {
	SnapshotId *uint32 `protobuf:"varint,1,opt,name=snapshotId" json:"snapshotId,omitempty"`
	// Snapshot root
	Root             *INodeSection_INode `protobuf:"bytes,2,opt,name=root" json:"root,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *SnapshotSection_Snapshot) Reset()         { *m = SnapshotSection_Snapshot{} }
func (m *SnapshotSection_Snapshot) String() string { return proto.CompactTextString(m) }
func (*SnapshotSection_Snapshot) ProtoMessage()    {}
func (*SnapshotSection_Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{6, 0}
}

func (m *SnapshotSection_Snapshot) GetSnapshotId() uint32 {
	if m != nil && m.SnapshotId != nil {
		return *m.SnapshotId
	}
	return 0
}

func (m *SnapshotSection_Snapshot) GetRoot() *INodeSection_INode {
	if m != nil {
		return m.Root
	}
	return nil
}

// *
// This section records information about snapshot diffs
// NAME: SNAPSHOT_DIFF
type SnapshotDiffSection struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SnapshotDiffSection) Reset()                    { *m = SnapshotDiffSection{} }
func (m *SnapshotDiffSection) String() string            { return proto.CompactTextString(m) }
func (*SnapshotDiffSection) ProtoMessage()               {}
func (*SnapshotDiffSection) Descriptor() ([]byte, []int) { return fileDescriptorFsimage, []int{7} }

type SnapshotDiffSection_CreatedListEntry struct {
	Name             []byte `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SnapshotDiffSection_CreatedListEntry) Reset()         { *m = SnapshotDiffSection_CreatedListEntry{} }
func (m *SnapshotDiffSection_CreatedListEntry) String() string { return proto.CompactTextString(m) }
func (*SnapshotDiffSection_CreatedListEntry) ProtoMessage()    {}
func (*SnapshotDiffSection_CreatedListEntry) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{7, 0}
}

func (m *SnapshotDiffSection_CreatedListEntry) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

type SnapshotDiffSection_DirectoryDiff struct {
	SnapshotId      *uint32                      `protobuf:"varint,1,opt,name=snapshotId" json:"snapshotId,omitempty"`
	ChildrenSize    *uint32                      `protobuf:"varint,2,opt,name=childrenSize" json:"childrenSize,omitempty"`
	IsSnapshotRoot  *bool                        `protobuf:"varint,3,opt,name=isSnapshotRoot" json:"isSnapshotRoot,omitempty"`
	Name            []byte                       `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	SnapshotCopy    *INodeSection_INodeDirectory `protobuf:"bytes,5,opt,name=snapshotCopy" json:"snapshotCopy,omitempty"`
	CreatedListSize *uint32                      `protobuf:"varint,6,opt,name=createdListSize" json:"createdListSize,omitempty"`
	DeletedINode    []uint64                     `protobuf:"varint,7,rep,packed,name=deletedINode" json:"deletedINode,omitempty"`
	// id of reference nodes in the deleted list
	DeletedINodeRef  []uint32 `protobuf:"varint,8,rep,packed,name=deletedINodeRef" json:"deletedINodeRef,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SnapshotDiffSection_DirectoryDiff) Reset()         { *m = SnapshotDiffSection_DirectoryDiff{} }
func (m *SnapshotDiffSection_DirectoryDiff) String() string { return proto.CompactTextString(m) }
func (*SnapshotDiffSection_DirectoryDiff) ProtoMessage()    {}
func (*SnapshotDiffSection_DirectoryDiff) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{7, 1}
}

func (m *SnapshotDiffSection_DirectoryDiff) GetSnapshotId() uint32 {
	if m != nil && m.SnapshotId != nil {
		return *m.SnapshotId
	}
	return 0
}

func (m *SnapshotDiffSection_DirectoryDiff) GetChildrenSize() uint32 {
	if m != nil && m.ChildrenSize != nil {
		return *m.ChildrenSize
	}
	return 0
}

func (m *SnapshotDiffSection_DirectoryDiff) GetIsSnapshotRoot() bool {
	if m != nil && m.IsSnapshotRoot != nil {
		return *m.IsSnapshotRoot
	}
	return false
}

func (m *SnapshotDiffSection_DirectoryDiff) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *SnapshotDiffSection_DirectoryDiff) GetSnapshotCopy() *INodeSection_INodeDirectory {
	if m != nil {
		return m.SnapshotCopy
	}
	return nil
}

func (m *SnapshotDiffSection_DirectoryDiff) GetCreatedListSize() uint32 {
	if m != nil && m.CreatedListSize != nil {
		return *m.CreatedListSize
	}
	return 0
}

func (m *SnapshotDiffSection_DirectoryDiff) GetDeletedINode() []uint64 {
	if m != nil {
		return m.DeletedINode
	}
	return nil
}

func (m *SnapshotDiffSection_DirectoryDiff) GetDeletedINodeRef() []uint32 {
	if m != nil {
		return m.DeletedINodeRef
	}
	return nil
}

type SnapshotDiffSection_FileDiff struct {
	SnapshotId       *uint32                 `protobuf:"varint,1,opt,name=snapshotId" json:"snapshotId,omitempty"`
	FileSize         *uint64                 `protobuf:"varint,2,opt,name=fileSize" json:"fileSize,omitempty"`
	Name             []byte                  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	SnapshotCopy     *INodeSection_INodeFile `protobuf:"bytes,4,opt,name=snapshotCopy" json:"snapshotCopy,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *SnapshotDiffSection_FileDiff) Reset()         { *m = SnapshotDiffSection_FileDiff{} }
func (m *SnapshotDiffSection_FileDiff) String() string { return proto.CompactTextString(m) }
func (*SnapshotDiffSection_FileDiff) ProtoMessage()    {}
func (*SnapshotDiffSection_FileDiff) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{7, 2}
}

func (m *SnapshotDiffSection_FileDiff) GetSnapshotId() uint32 {
	if m != nil && m.SnapshotId != nil {
		return *m.SnapshotId
	}
	return 0
}

func (m *SnapshotDiffSection_FileDiff) GetFileSize() uint64 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

func (m *SnapshotDiffSection_FileDiff) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *SnapshotDiffSection_FileDiff) GetSnapshotCopy() *INodeSection_INodeFile {
	if m != nil {
		return m.SnapshotCopy
	}
	return nil
}

type SnapshotDiffSection_DiffEntry struct {
	Type             *SnapshotDiffSection_DiffEntry_Type `protobuf:"varint,1,req,name=type,enum=hadoop.hdfs.fsimage.SnapshotDiffSection_DiffEntry_Type" json:"type,omitempty"`
	InodeId          *uint64                             `protobuf:"varint,2,opt,name=inodeId" json:"inodeId,omitempty"`
	NumOfDiff        *uint32                             `protobuf:"varint,3,opt,name=numOfDiff" json:"numOfDiff,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *SnapshotDiffSection_DiffEntry) Reset()         { *m = SnapshotDiffSection_DiffEntry{} }
func (m *SnapshotDiffSection_DiffEntry) String() string { return proto.CompactTextString(m) }
func (*SnapshotDiffSection_DiffEntry) ProtoMessage()    {}
func (*SnapshotDiffSection_DiffEntry) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{7, 3}
}

func (m *SnapshotDiffSection_DiffEntry) GetType() SnapshotDiffSection_DiffEntry_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SnapshotDiffSection_DiffEntry_FILEDIFF
}

func (m *SnapshotDiffSection_DiffEntry) GetInodeId() uint64 {
	if m != nil && m.InodeId != nil {
		return *m.InodeId
	}
	return 0
}

func (m *SnapshotDiffSection_DiffEntry) GetNumOfDiff() uint32 {
	if m != nil && m.NumOfDiff != nil {
		return *m.NumOfDiff
	}
	return 0
}

// *
// This section maps string to id
// NAME: STRING_TABLE
type StringTableSection struct {
	NumEntry         *uint32 `protobuf:"varint,1,opt,name=numEntry" json:"numEntry,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StringTableSection) Reset()                    { *m = StringTableSection{} }
func (m *StringTableSection) String() string            { return proto.CompactTextString(m) }
func (*StringTableSection) ProtoMessage()               {}
func (*StringTableSection) Descriptor() ([]byte, []int) { return fileDescriptorFsimage, []int{8} }

func (m *StringTableSection) GetNumEntry() uint32 {
	if m != nil && m.NumEntry != nil {
		return *m.NumEntry
	}
	return 0
}

type StringTableSection_Entry struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Str              *string `protobuf:"bytes,2,opt,name=str" json:"str,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StringTableSection_Entry) Reset()         { *m = StringTableSection_Entry{} }
func (m *StringTableSection_Entry) String() string { return proto.CompactTextString(m) }
func (*StringTableSection_Entry) ProtoMessage()    {}
func (*StringTableSection_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{8, 0}
}

func (m *StringTableSection_Entry) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *StringTableSection_Entry) GetStr() string {
	if m != nil && m.Str != nil {
		return *m.Str
	}
	return ""
}

type SecretManagerSection struct {
	CurrentId           *uint32 `protobuf:"varint,1,opt,name=currentId" json:"currentId,omitempty"`
	TokenSequenceNumber *uint32 `protobuf:"varint,2,opt,name=tokenSequenceNumber" json:"tokenSequenceNumber,omitempty"`
	NumKeys             *uint32 `protobuf:"varint,3,opt,name=numKeys" json:"numKeys,omitempty"`
	NumTokens           *uint32 `protobuf:"varint,4,opt,name=numTokens" json:"numTokens,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *SecretManagerSection) Reset()                    { *m = SecretManagerSection{} }
func (m *SecretManagerSection) String() string            { return proto.CompactTextString(m) }
func (*SecretManagerSection) ProtoMessage()               {}
func (*SecretManagerSection) Descriptor() ([]byte, []int) { return fileDescriptorFsimage, []int{9} }

func (m *SecretManagerSection) GetCurrentId() uint32 {
	if m != nil && m.CurrentId != nil {
		return *m.CurrentId
	}
	return 0
}

func (m *SecretManagerSection) GetTokenSequenceNumber() uint32 {
	if m != nil && m.TokenSequenceNumber != nil {
		return *m.TokenSequenceNumber
	}
	return 0
}

func (m *SecretManagerSection) GetNumKeys() uint32 {
	if m != nil && m.NumKeys != nil {
		return *m.NumKeys
	}
	return 0
}

func (m *SecretManagerSection) GetNumTokens() uint32 {
	if m != nil && m.NumTokens != nil {
		return *m.NumTokens
	}
	return 0
}

type SecretManagerSection_DelegationKey struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ExpiryDate       *uint64 `protobuf:"varint,2,opt,name=expiryDate" json:"expiryDate,omitempty"`
	Key              []byte  `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SecretManagerSection_DelegationKey) Reset()         { *m = SecretManagerSection_DelegationKey{} }
func (m *SecretManagerSection_DelegationKey) String() string { return proto.CompactTextString(m) }
func (*SecretManagerSection_DelegationKey) ProtoMessage()    {}
func (*SecretManagerSection_DelegationKey) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{9, 0}
}

func (m *SecretManagerSection_DelegationKey) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SecretManagerSection_DelegationKey) GetExpiryDate() uint64 {
	if m != nil && m.ExpiryDate != nil {
		return *m.ExpiryDate
	}
	return 0
}

func (m *SecretManagerSection_DelegationKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type SecretManagerSection_PersistToken struct {
	Version          *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Owner            *string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	Renewer          *string `protobuf:"bytes,3,opt,name=renewer" json:"renewer,omitempty"`
	RealUser         *string `protobuf:"bytes,4,opt,name=realUser" json:"realUser,omitempty"`
	IssueDate        *uint64 `protobuf:"varint,5,opt,name=issueDate" json:"issueDate,omitempty"`
	MaxDate          *uint64 `protobuf:"varint,6,opt,name=maxDate" json:"maxDate,omitempty"`
	SequenceNumber   *uint32 `protobuf:"varint,7,opt,name=sequenceNumber" json:"sequenceNumber,omitempty"`
	MasterKeyId      *uint32 `protobuf:"varint,8,opt,name=masterKeyId" json:"masterKeyId,omitempty"`
	ExpiryDate       *uint64 `protobuf:"varint,9,opt,name=expiryDate" json:"expiryDate,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SecretManagerSection_PersistToken) Reset()         { *m = SecretManagerSection_PersistToken{} }
func (m *SecretManagerSection_PersistToken) String() string { return proto.CompactTextString(m) }
func (*SecretManagerSection_PersistToken) ProtoMessage()    {}
func (*SecretManagerSection_PersistToken) Descriptor() ([]byte, []int) {
	return fileDescriptorFsimage, []int{9, 1}
}

func (m *SecretManagerSection_PersistToken) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *SecretManagerSection_PersistToken) GetOwner() string {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return ""
}

func (m *SecretManagerSection_PersistToken) GetRenewer() string {
	if m != nil && m.Renewer != nil {
		return *m.Renewer
	}
	return ""
}

func (m *SecretManagerSection_PersistToken) GetRealUser() string {
	if m != nil && m.RealUser != nil {
		return *m.RealUser
	}
	return ""
}

func (m *SecretManagerSection_PersistToken) GetIssueDate() uint64 {
	if m != nil && m.IssueDate != nil {
		return *m.IssueDate
	}
	return 0
}

func (m *SecretManagerSection_PersistToken) GetMaxDate() uint64 {
	if m != nil && m.MaxDate != nil {
		return *m.MaxDate
	}
	return 0
}

func (m *SecretManagerSection_PersistToken) GetSequenceNumber() uint32 {
	if m != nil && m.SequenceNumber != nil {
		return *m.SequenceNumber
	}
	return 0
}

func (m *SecretManagerSection_PersistToken) GetMasterKeyId() uint32 {
	if m != nil && m.MasterKeyId != nil {
		return *m.MasterKeyId
	}
	return 0
}

func (m *SecretManagerSection_PersistToken) GetExpiryDate() uint64 {
	if m != nil && m.ExpiryDate != nil {
		return *m.ExpiryDate
	}
	return 0
}

type CacheManagerSection struct {
	NextDirectiveId  *uint64 `protobuf:"varint,1,req,name=nextDirectiveId" json:"nextDirectiveId,omitempty"`
	NumPools         *uint32 `protobuf:"varint,2,req,name=numPools" json:"numPools,omitempty"`
	NumDirectives    *uint32 `protobuf:"varint,3,req,name=numDirectives" json:"numDirectives,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CacheManagerSection) Reset()                    { *m = CacheManagerSection{} }
func (m *CacheManagerSection) String() string            { return proto.CompactTextString(m) }
func (*CacheManagerSection) ProtoMessage()               {}
func (*CacheManagerSection) Descriptor() ([]byte, []int) { return fileDescriptorFsimage, []int{10} }

func (m *CacheManagerSection) GetNextDirectiveId() uint64 {
	if m != nil && m.NextDirectiveId != nil {
		return *m.NextDirectiveId
	}
	return 0
}

func (m *CacheManagerSection) GetNumPools() uint32 {
	if m != nil && m.NumPools != nil {
		return *m.NumPools
	}
	return 0
}

func (m *CacheManagerSection) GetNumDirectives() uint32 {
	if m != nil && m.NumDirectives != nil {
		return *m.NumDirectives
	}
	return 0
}

func init() {
	proto.RegisterType((*FileSummary)(nil), "hadoop.hdfs.fsimage.FileSummary")
	proto.RegisterType((*FileSummary_Section)(nil), "hadoop.hdfs.fsimage.FileSummary.Section")
	proto.RegisterType((*NameSystemSection)(nil), "hadoop.hdfs.fsimage.NameSystemSection")
	proto.RegisterType((*INodeSection)(nil), "hadoop.hdfs.fsimage.INodeSection")
	proto.RegisterType((*INodeSection_FileUnderConstructionFeature)(nil), "hadoop.hdfs.fsimage.INodeSection.FileUnderConstructionFeature")
	proto.RegisterType((*INodeSection_AclFeatureProto)(nil), "hadoop.hdfs.fsimage.INodeSection.AclFeatureProto")
	proto.RegisterType((*INodeSection_XAttrCompactProto)(nil), "hadoop.hdfs.fsimage.INodeSection.XAttrCompactProto")
	proto.RegisterType((*INodeSection_XAttrFeatureProto)(nil), "hadoop.hdfs.fsimage.INodeSection.XAttrFeatureProto")
	proto.RegisterType((*INodeSection_INodeFile)(nil), "hadoop.hdfs.fsimage.INodeSection.INodeFile")
	proto.RegisterType((*INodeSection_INodeDirectory)(nil), "hadoop.hdfs.fsimage.INodeSection.INodeDirectory")
	proto.RegisterType((*INodeSection_INodeSymlink)(nil), "hadoop.hdfs.fsimage.INodeSection.INodeSymlink")
	proto.RegisterType((*INodeSection_INode)(nil), "hadoop.hdfs.fsimage.INodeSection.INode")
	proto.RegisterType((*FilesUnderConstructionSection)(nil), "hadoop.hdfs.fsimage.FilesUnderConstructionSection")
	proto.RegisterType((*FilesUnderConstructionSection_FileUnderConstructionEntry)(nil), "hadoop.hdfs.fsimage.FilesUnderConstructionSection.FileUnderConstructionEntry")
	proto.RegisterType((*INodeDirectorySection)(nil), "hadoop.hdfs.fsimage.INodeDirectorySection")
	proto.RegisterType((*INodeDirectorySection_DirEntry)(nil), "hadoop.hdfs.fsimage.INodeDirectorySection.DirEntry")
	proto.RegisterType((*INodeReferenceSection)(nil), "hadoop.hdfs.fsimage.INodeReferenceSection")
	proto.RegisterType((*INodeReferenceSection_INodeReference)(nil), "hadoop.hdfs.fsimage.INodeReferenceSection.INodeReference")
	proto.RegisterType((*SnapshotSection)(nil), "hadoop.hdfs.fsimage.SnapshotSection")
	proto.RegisterType((*SnapshotSection_Snapshot)(nil), "hadoop.hdfs.fsimage.SnapshotSection.Snapshot")
	proto.RegisterType((*SnapshotDiffSection)(nil), "hadoop.hdfs.fsimage.SnapshotDiffSection")
	proto.RegisterType((*SnapshotDiffSection_CreatedListEntry)(nil), "hadoop.hdfs.fsimage.SnapshotDiffSection.CreatedListEntry")
	proto.RegisterType((*SnapshotDiffSection_DirectoryDiff)(nil), "hadoop.hdfs.fsimage.SnapshotDiffSection.DirectoryDiff")
	proto.RegisterType((*SnapshotDiffSection_FileDiff)(nil), "hadoop.hdfs.fsimage.SnapshotDiffSection.FileDiff")
	proto.RegisterType((*SnapshotDiffSection_DiffEntry)(nil), "hadoop.hdfs.fsimage.SnapshotDiffSection.DiffEntry")
	proto.RegisterType((*StringTableSection)(nil), "hadoop.hdfs.fsimage.StringTableSection")
	proto.RegisterType((*StringTableSection_Entry)(nil), "hadoop.hdfs.fsimage.StringTableSection.Entry")
	proto.RegisterType((*SecretManagerSection)(nil), "hadoop.hdfs.fsimage.SecretManagerSection")
	proto.RegisterType((*SecretManagerSection_DelegationKey)(nil), "hadoop.hdfs.fsimage.SecretManagerSection.DelegationKey")
	proto.RegisterType((*SecretManagerSection_PersistToken)(nil), "hadoop.hdfs.fsimage.SecretManagerSection.PersistToken")
	proto.RegisterType((*CacheManagerSection)(nil), "hadoop.hdfs.fsimage.CacheManagerSection")
	proto.RegisterEnum("hadoop.hdfs.fsimage.INodeSection_INode_Type", INodeSection_INode_Type_name, INodeSection_INode_Type_value)
	proto.RegisterEnum("hadoop.hdfs.fsimage.SnapshotDiffSection_DiffEntry_Type", SnapshotDiffSection_DiffEntry_Type_name, SnapshotDiffSection_DiffEntry_Type_value)
}
func (m *FileSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileSummary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OndiskVersion == nil {
		return 0, proto.NewRequiredNotSetError("ondiskVersion")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.OndiskVersion))
	}
	if m.LayoutVersion == nil {
		return 0, proto.NewRequiredNotSetError("layoutVersion")
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.LayoutVersion))
	}
	if m.Codec != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(*m.Codec)))
		i += copy(dAtA[i:], *m.Codec)
	}
	if len(m.Sections) > 0 {
		for _, msg := range m.Sections {
			dAtA[i] = 0x22
			i++
			i = encodeVarintFsimage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FileSummary_Section) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileSummary_Section) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Length != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.Length))
	}
	if m.Offset != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.Offset))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NameSystemSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameSystemSection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NamespaceId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.NamespaceId))
	}
	if m.GenstampV1 != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.GenstampV1))
	}
	if m.GenstampV2 != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.GenstampV2))
	}
	if m.GenstampV1Limit != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.GenstampV1Limit))
	}
	if m.LastAllocatedBlockId != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.LastAllocatedBlockId))
	}
	if m.TransactionId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.TransactionId))
	}
	if m.RollingUpgradeStartTime != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.RollingUpgradeStartTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *INodeSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INodeSection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastInodeId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.LastInodeId))
	}
	if m.NumInodes != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.NumInodes))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *INodeSection_FileUnderConstructionFeature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INodeSection_FileUnderConstructionFeature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientName != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(*m.ClientName)))
		i += copy(dAtA[i:], *m.ClientName)
	}
	if m.ClientMachine != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(*m.ClientMachine)))
		i += copy(dAtA[i:], *m.ClientMachine)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *INodeSection_AclFeatureProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INodeSection_AclFeatureProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(m.Entries)*4))
		for _, num := range m.Entries {
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(num))
			i += 4
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *INodeSection_XAttrCompactProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INodeSection_XAttrCompactProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name == nil {
		return 0, proto.NewRequiredNotSetError("name")
	} else {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(*m.Name))
		i += 4
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *INodeSection_XAttrFeatureProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INodeSection_XAttrFeatureProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.XAttrs) > 0 {
		for _, msg := range m.XAttrs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFsimage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *INodeSection_INodeFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INodeSection_INodeFile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Replication != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.Replication))
	}
	if m.ModificationTime != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.ModificationTime))
	}
	if m.AccessTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.AccessTime))
	}
	if m.PreferredBlockSize != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.PreferredBlockSize))
	}
	if m.Permission != nil {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(*m.Permission))
		i += 8
	}
	if len(m.Blocks) > 0 {
		for _, msg := range m.Blocks {
			dAtA[i] = 0x32
			i++
			i = encodeVarintFsimage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FileUC != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(m.FileUC.Size()))
		n1, err := m.FileUC.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Acl != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(m.Acl.Size()))
		n2, err := m.Acl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XAttrs != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(m.XAttrs.Size()))
		n3, err := m.XAttrs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *INodeSection_INodeDirectory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INodeSection_INodeDirectory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModificationTime != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.ModificationTime))
	}
	if m.NsQuota != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.NsQuota))
	}
	if m.DsQuota != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.DsQuota))
	}
	if m.Permission != nil {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(*m.Permission))
		i += 8
	}
	if m.Acl != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(m.Acl.Size()))
		n4, err := m.Acl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XAttrs != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(m.XAttrs.Size()))
		n5, err := m.XAttrs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *INodeSection_INodeSymlink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INodeSection_INodeSymlink) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Permission != nil {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(*m.Permission))
		i += 8
	}
	if m.Target != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.ModificationTime != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.ModificationTime))
	}
	if m.AccessTime != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.AccessTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *INodeSection_INode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INodeSection_INode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type == nil {
		return 0, proto.NewRequiredNotSetError("type")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.Type))
	}
	if m.Id == nil {
		return 0, proto.NewRequiredNotSetError("id")
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.Id))
	}
	if m.Name != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.File != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(m.File.Size()))
		n6, err := m.File.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Directory != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(m.Directory.Size()))
		n7, err := m.Directory.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Symlink != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(m.Symlink.Size()))
		n8, err := m.Symlink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FilesUnderConstructionSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilesUnderConstructionSection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FilesUnderConstructionSection_FileUnderConstructionEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilesUnderConstructionSection_FileUnderConstructionEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InodeId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.InodeId))
	}
	if m.FullPath != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(*m.FullPath)))
		i += copy(dAtA[i:], *m.FullPath)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *INodeDirectorySection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INodeDirectorySection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *INodeDirectorySection_DirEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INodeDirectorySection_DirEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Parent != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.Parent))
	}
	if len(m.Children) > 0 {
		dAtA10 := make([]byte, len(m.Children)*10)
		var j9 int
		for _, num := range m.Children {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if len(m.RefChildren) > 0 {
		dAtA12 := make([]byte, len(m.RefChildren)*10)
		var j11 int
		for _, num := range m.RefChildren {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *INodeReferenceSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INodeReferenceSection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *INodeReferenceSection_INodeReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *INodeReferenceSection_INodeReference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReferredId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.ReferredId))
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.DstSnapshotId != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.DstSnapshotId))
	}
	if m.LastSnapshotId != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.LastSnapshotId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnapshotSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotSection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SnapshotCounter != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.SnapshotCounter))
	}
	if len(m.SnapshottableDir) > 0 {
		dAtA14 := make([]byte, len(m.SnapshottableDir)*10)
		var j13 int
		for _, num := range m.SnapshottableDir {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA14[:j13])
	}
	if m.NumSnapshots != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.NumSnapshots))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnapshotSection_Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotSection_Snapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SnapshotId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.SnapshotId))
	}
	if m.Root != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(m.Root.Size()))
		n15, err := m.Root.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnapshotDiffSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotDiffSection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnapshotDiffSection_CreatedListEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotDiffSection_CreatedListEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnapshotDiffSection_DirectoryDiff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotDiffSection_DirectoryDiff) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SnapshotId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.SnapshotId))
	}
	if m.ChildrenSize != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.ChildrenSize))
	}
	if m.IsSnapshotRoot != nil {
		dAtA[i] = 0x18
		i++
		if *m.IsSnapshotRoot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Name != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.SnapshotCopy != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(m.SnapshotCopy.Size()))
		n16, err := m.SnapshotCopy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.CreatedListSize != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.CreatedListSize))
	}
	if len(m.DeletedINode) > 0 {
		dAtA18 := make([]byte, len(m.DeletedINode)*10)
		var j17 int
		for _, num := range m.DeletedINode {
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(j17))
		i += copy(dAtA[i:], dAtA18[:j17])
	}
	if len(m.DeletedINodeRef) > 0 {
		dAtA20 := make([]byte, len(m.DeletedINodeRef)*10)
		var j19 int
		for _, num := range m.DeletedINodeRef {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(j19))
		i += copy(dAtA[i:], dAtA20[:j19])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnapshotDiffSection_FileDiff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotDiffSection_FileDiff) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SnapshotId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.SnapshotId))
	}
	if m.FileSize != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.FileSize))
	}
	if m.Name != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.SnapshotCopy != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(m.SnapshotCopy.Size()))
		n21, err := m.SnapshotCopy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnapshotDiffSection_DiffEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotDiffSection_DiffEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type == nil {
		return 0, proto.NewRequiredNotSetError("type")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.Type))
	}
	if m.InodeId != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.InodeId))
	}
	if m.NumOfDiff != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.NumOfDiff))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StringTableSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringTableSection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumEntry != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.NumEntry))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StringTableSection_Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringTableSection_Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.Id))
	}
	if m.Str != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(*m.Str)))
		i += copy(dAtA[i:], *m.Str)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SecretManagerSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretManagerSection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentId != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.CurrentId))
	}
	if m.TokenSequenceNumber != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.TokenSequenceNumber))
	}
	if m.NumKeys != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.NumKeys))
	}
	if m.NumTokens != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.NumTokens))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SecretManagerSection_DelegationKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretManagerSection_DelegationKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.Id))
	}
	if m.ExpiryDate != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.ExpiryDate))
	}
	if m.Key != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SecretManagerSection_PersistToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretManagerSection_PersistToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.Version))
	}
	if m.Owner != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(*m.Owner)))
		i += copy(dAtA[i:], *m.Owner)
	}
	if m.Renewer != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(*m.Renewer)))
		i += copy(dAtA[i:], *m.Renewer)
	}
	if m.RealUser != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(len(*m.RealUser)))
		i += copy(dAtA[i:], *m.RealUser)
	}
	if m.IssueDate != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.IssueDate))
	}
	if m.MaxDate != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.MaxDate))
	}
	if m.SequenceNumber != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.SequenceNumber))
	}
	if m.MasterKeyId != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.MasterKeyId))
	}
	if m.ExpiryDate != nil {
		dAtA[i] = 0x48
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.ExpiryDate))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CacheManagerSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheManagerSection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NextDirectiveId == nil {
		return 0, proto.NewRequiredNotSetError("nextDirectiveId")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.NextDirectiveId))
	}
	if m.NumPools == nil {
		return 0, proto.NewRequiredNotSetError("numPools")
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.NumPools))
	}
	if m.NumDirectives == nil {
		return 0, proto.NewRequiredNotSetError("numDirectives")
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFsimage(dAtA, i, uint64(*m.NumDirectives))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintFsimage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FileSummary) Size() (n int) {
	var l int
	_ = l
	if m.OndiskVersion != nil {
		n += 1 + sovFsimage(uint64(*m.OndiskVersion))
	}
	if m.LayoutVersion != nil {
		n += 1 + sovFsimage(uint64(*m.LayoutVersion))
	}
	if m.Codec != nil {
		l = len(*m.Codec)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovFsimage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileSummary_Section) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.Length != nil {
		n += 1 + sovFsimage(uint64(*m.Length))
	}
	if m.Offset != nil {
		n += 1 + sovFsimage(uint64(*m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NameSystemSection) Size() (n int) {
	var l int
	_ = l
	if m.NamespaceId != nil {
		n += 1 + sovFsimage(uint64(*m.NamespaceId))
	}
	if m.GenstampV1 != nil {
		n += 1 + sovFsimage(uint64(*m.GenstampV1))
	}
	if m.GenstampV2 != nil {
		n += 1 + sovFsimage(uint64(*m.GenstampV2))
	}
	if m.GenstampV1Limit != nil {
		n += 1 + sovFsimage(uint64(*m.GenstampV1Limit))
	}
	if m.LastAllocatedBlockId != nil {
		n += 1 + sovFsimage(uint64(*m.LastAllocatedBlockId))
	}
	if m.TransactionId != nil {
		n += 1 + sovFsimage(uint64(*m.TransactionId))
	}
	if m.RollingUpgradeStartTime != nil {
		n += 1 + sovFsimage(uint64(*m.RollingUpgradeStartTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *INodeSection) Size() (n int) {
	var l int
	_ = l
	if m.LastInodeId != nil {
		n += 1 + sovFsimage(uint64(*m.LastInodeId))
	}
	if m.NumInodes != nil {
		n += 1 + sovFsimage(uint64(*m.NumInodes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *INodeSection_FileUnderConstructionFeature) Size() (n int) {
	var l int
	_ = l
	if m.ClientName != nil {
		l = len(*m.ClientName)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.ClientMachine != nil {
		l = len(*m.ClientMachine)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *INodeSection_AclFeatureProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Entries) > 0 {
		n += 1 + sovFsimage(uint64(len(m.Entries)*4)) + len(m.Entries)*4
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *INodeSection_XAttrCompactProto) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		n += 5
	}
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *INodeSection_XAttrFeatureProto) Size() (n int) {
	var l int
	_ = l
	if len(m.XAttrs) > 0 {
		for _, e := range m.XAttrs {
			l = e.Size()
			n += 1 + l + sovFsimage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *INodeSection_INodeFile) Size() (n int) {
	var l int
	_ = l
	if m.Replication != nil {
		n += 1 + sovFsimage(uint64(*m.Replication))
	}
	if m.ModificationTime != nil {
		n += 1 + sovFsimage(uint64(*m.ModificationTime))
	}
	if m.AccessTime != nil {
		n += 1 + sovFsimage(uint64(*m.AccessTime))
	}
	if m.PreferredBlockSize != nil {
		n += 1 + sovFsimage(uint64(*m.PreferredBlockSize))
	}
	if m.Permission != nil {
		n += 9
	}
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovFsimage(uint64(l))
		}
	}
	if m.FileUC != nil {
		l = m.FileUC.Size()
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.Acl != nil {
		l = m.Acl.Size()
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.XAttrs != nil {
		l = m.XAttrs.Size()
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *INodeSection_INodeDirectory) Size() (n int) {
	var l int
	_ = l
	if m.ModificationTime != nil {
		n += 1 + sovFsimage(uint64(*m.ModificationTime))
	}
	if m.NsQuota != nil {
		n += 1 + sovFsimage(uint64(*m.NsQuota))
	}
	if m.DsQuota != nil {
		n += 1 + sovFsimage(uint64(*m.DsQuota))
	}
	if m.Permission != nil {
		n += 9
	}
	if m.Acl != nil {
		l = m.Acl.Size()
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.XAttrs != nil {
		l = m.XAttrs.Size()
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *INodeSection_INodeSymlink) Size() (n int) {
	var l int
	_ = l
	if m.Permission != nil {
		n += 9
	}
	if m.Target != nil {
		l = len(m.Target)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.ModificationTime != nil {
		n += 1 + sovFsimage(uint64(*m.ModificationTime))
	}
	if m.AccessTime != nil {
		n += 1 + sovFsimage(uint64(*m.AccessTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *INodeSection_INode) Size() (n int) {
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovFsimage(uint64(*m.Type))
	}
	if m.Id != nil {
		n += 1 + sovFsimage(uint64(*m.Id))
	}
	if m.Name != nil {
		l = len(m.Name)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.Directory != nil {
		l = m.Directory.Size()
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.Symlink != nil {
		l = m.Symlink.Size()
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FilesUnderConstructionSection) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FilesUnderConstructionSection_FileUnderConstructionEntry) Size() (n int) {
	var l int
	_ = l
	if m.InodeId != nil {
		n += 1 + sovFsimage(uint64(*m.InodeId))
	}
	if m.FullPath != nil {
		l = len(*m.FullPath)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *INodeDirectorySection) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *INodeDirectorySection_DirEntry) Size() (n int) {
	var l int
	_ = l
	if m.Parent != nil {
		n += 1 + sovFsimage(uint64(*m.Parent))
	}
	if len(m.Children) > 0 {
		l = 0
		for _, e := range m.Children {
			l += sovFsimage(uint64(e))
		}
		n += 1 + sovFsimage(uint64(l)) + l
	}
	if len(m.RefChildren) > 0 {
		l = 0
		for _, e := range m.RefChildren {
			l += sovFsimage(uint64(e))
		}
		n += 1 + sovFsimage(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *INodeReferenceSection) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *INodeReferenceSection_INodeReference) Size() (n int) {
	var l int
	_ = l
	if m.ReferredId != nil {
		n += 1 + sovFsimage(uint64(*m.ReferredId))
	}
	if m.Name != nil {
		l = len(m.Name)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.DstSnapshotId != nil {
		n += 1 + sovFsimage(uint64(*m.DstSnapshotId))
	}
	if m.LastSnapshotId != nil {
		n += 1 + sovFsimage(uint64(*m.LastSnapshotId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotSection) Size() (n int) {
	var l int
	_ = l
	if m.SnapshotCounter != nil {
		n += 1 + sovFsimage(uint64(*m.SnapshotCounter))
	}
	if len(m.SnapshottableDir) > 0 {
		l = 0
		for _, e := range m.SnapshottableDir {
			l += sovFsimage(uint64(e))
		}
		n += 1 + sovFsimage(uint64(l)) + l
	}
	if m.NumSnapshots != nil {
		n += 1 + sovFsimage(uint64(*m.NumSnapshots))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotSection_Snapshot) Size() (n int) {
	var l int
	_ = l
	if m.SnapshotId != nil {
		n += 1 + sovFsimage(uint64(*m.SnapshotId))
	}
	if m.Root != nil {
		l = m.Root.Size()
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotDiffSection) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotDiffSection_CreatedListEntry) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(m.Name)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotDiffSection_DirectoryDiff) Size() (n int) {
	var l int
	_ = l
	if m.SnapshotId != nil {
		n += 1 + sovFsimage(uint64(*m.SnapshotId))
	}
	if m.ChildrenSize != nil {
		n += 1 + sovFsimage(uint64(*m.ChildrenSize))
	}
	if m.IsSnapshotRoot != nil {
		n += 2
	}
	if m.Name != nil {
		l = len(m.Name)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.SnapshotCopy != nil {
		l = m.SnapshotCopy.Size()
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.CreatedListSize != nil {
		n += 1 + sovFsimage(uint64(*m.CreatedListSize))
	}
	if len(m.DeletedINode) > 0 {
		l = 0
		for _, e := range m.DeletedINode {
			l += sovFsimage(uint64(e))
		}
		n += 1 + sovFsimage(uint64(l)) + l
	}
	if len(m.DeletedINodeRef) > 0 {
		l = 0
		for _, e := range m.DeletedINodeRef {
			l += sovFsimage(uint64(e))
		}
		n += 1 + sovFsimage(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotDiffSection_FileDiff) Size() (n int) {
	var l int
	_ = l
	if m.SnapshotId != nil {
		n += 1 + sovFsimage(uint64(*m.SnapshotId))
	}
	if m.FileSize != nil {
		n += 1 + sovFsimage(uint64(*m.FileSize))
	}
	if m.Name != nil {
		l = len(m.Name)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.SnapshotCopy != nil {
		l = m.SnapshotCopy.Size()
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotDiffSection_DiffEntry) Size() (n int) {
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovFsimage(uint64(*m.Type))
	}
	if m.InodeId != nil {
		n += 1 + sovFsimage(uint64(*m.InodeId))
	}
	if m.NumOfDiff != nil {
		n += 1 + sovFsimage(uint64(*m.NumOfDiff))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StringTableSection) Size() (n int) {
	var l int
	_ = l
	if m.NumEntry != nil {
		n += 1 + sovFsimage(uint64(*m.NumEntry))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StringTableSection_Entry) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFsimage(uint64(*m.Id))
	}
	if m.Str != nil {
		l = len(*m.Str)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecretManagerSection) Size() (n int) {
	var l int
	_ = l
	if m.CurrentId != nil {
		n += 1 + sovFsimage(uint64(*m.CurrentId))
	}
	if m.TokenSequenceNumber != nil {
		n += 1 + sovFsimage(uint64(*m.TokenSequenceNumber))
	}
	if m.NumKeys != nil {
		n += 1 + sovFsimage(uint64(*m.NumKeys))
	}
	if m.NumTokens != nil {
		n += 1 + sovFsimage(uint64(*m.NumTokens))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecretManagerSection_DelegationKey) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovFsimage(uint64(*m.Id))
	}
	if m.ExpiryDate != nil {
		n += 1 + sovFsimage(uint64(*m.ExpiryDate))
	}
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecretManagerSection_PersistToken) Size() (n int) {
	var l int
	_ = l
	if m.Version != nil {
		n += 1 + sovFsimage(uint64(*m.Version))
	}
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.Renewer != nil {
		l = len(*m.Renewer)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.RealUser != nil {
		l = len(*m.RealUser)
		n += 1 + l + sovFsimage(uint64(l))
	}
	if m.IssueDate != nil {
		n += 1 + sovFsimage(uint64(*m.IssueDate))
	}
	if m.MaxDate != nil {
		n += 1 + sovFsimage(uint64(*m.MaxDate))
	}
	if m.SequenceNumber != nil {
		n += 1 + sovFsimage(uint64(*m.SequenceNumber))
	}
	if m.MasterKeyId != nil {
		n += 1 + sovFsimage(uint64(*m.MasterKeyId))
	}
	if m.ExpiryDate != nil {
		n += 1 + sovFsimage(uint64(*m.ExpiryDate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CacheManagerSection) Size() (n int) {
	var l int
	_ = l
	if m.NextDirectiveId != nil {
		n += 1 + sovFsimage(uint64(*m.NextDirectiveId))
	}
	if m.NumPools != nil {
		n += 1 + sovFsimage(uint64(*m.NumPools))
	}
	if m.NumDirectives != nil {
		n += 1 + sovFsimage(uint64(*m.NumDirectives))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFsimage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFsimage(x uint64) (n int) {
	return sovFsimage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FileSummary) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OndiskVersion", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OndiskVersion = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayoutVersion", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LayoutVersion = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Codec = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &FileSummary_Section{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("ondiskVersion")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("layoutVersion")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileSummary_Section) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Section: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Section: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Length = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Offset = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameSystemSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameSystemSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameSystemSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NamespaceId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenstampV1", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GenstampV1 = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenstampV2", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GenstampV2 = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenstampV1Limit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GenstampV1Limit = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAllocatedBlockId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastAllocatedBlockId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransactionId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingUpgradeStartTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RollingUpgradeStartTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *INodeSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: INodeSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: INodeSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastInodeId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastInodeId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInodes", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumInodes = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *INodeSection_FileUnderConstructionFeature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileUnderConstructionFeature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileUnderConstructionFeature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClientName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientMachine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClientMachine = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *INodeSection_AclFeatureProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclFeatureProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclFeatureProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				m.Entries = append(m.Entries, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFsimage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFsimage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					m.Entries = append(m.Entries, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *INodeSection_XAttrCompactProto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XAttrCompactProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XAttrCompactProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Name = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *INodeSection_XAttrFeatureProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XAttrFeatureProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XAttrFeatureProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAttrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAttrs = append(m.XAttrs, &INodeSection_XAttrCompactProto{})
			if err := m.XAttrs[len(m.XAttrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *INodeSection_INodeFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: INodeFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: INodeFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replication", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Replication = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModificationTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModificationTime = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AccessTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredBlockSize", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreferredBlockSize = &v
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Permission = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &hadoop_hdfs.BlockProto{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileUC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileUC == nil {
				m.FileUC = &INodeSection_FileUnderConstructionFeature{}
			}
			if err := m.FileUC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Acl == nil {
				m.Acl = &INodeSection_AclFeatureProto{}
			}
			if err := m.Acl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAttrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XAttrs == nil {
				m.XAttrs = &INodeSection_XAttrFeatureProto{}
			}
			if err := m.XAttrs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *INodeSection_INodeDirectory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: INodeDirectory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: INodeDirectory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModificationTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModificationTime = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsQuota", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NsQuota = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DsQuota", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DsQuota = &v
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Permission = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Acl == nil {
				m.Acl = &INodeSection_AclFeatureProto{}
			}
			if err := m.Acl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAttrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XAttrs == nil {
				m.XAttrs = &INodeSection_XAttrFeatureProto{}
			}
			if err := m.XAttrs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *INodeSection_INodeSymlink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: INodeSymlink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: INodeSymlink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Permission = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModificationTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModificationTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AccessTime = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *INodeSection_INode) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: INode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: INode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v INodeSection_INode_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (INodeSection_INode_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &INodeSection_INodeFile{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Directory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Directory == nil {
				m.Directory = &INodeSection_INodeDirectory{}
			}
			if err := m.Directory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Symlink == nil {
				m.Symlink = &INodeSection_INodeSymlink{}
			}
			if err := m.Symlink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilesUnderConstructionSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilesUnderConstructionSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilesUnderConstructionSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilesUnderConstructionSection_FileUnderConstructionEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileUnderConstructionEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileUnderConstructionEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InodeId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InodeId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FullPath = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *INodeDirectorySection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: INodeDirectorySection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: INodeDirectorySection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *INodeDirectorySection_DirEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Parent = &v
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFsimage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Children = append(m.Children, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFsimage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFsimage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFsimage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Children = append(m.Children, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFsimage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RefChildren = append(m.RefChildren, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFsimage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFsimage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFsimage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RefChildren = append(m.RefChildren, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RefChildren", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *INodeReferenceSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: INodeReferenceSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: INodeReferenceSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *INodeReferenceSection_INodeReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: INodeReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: INodeReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferredId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReferredId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstSnapshotId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DstSnapshotId = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSnapshotId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastSnapshotId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotCounter", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnapshotCounter = &v
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFsimage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SnapshottableDir = append(m.SnapshottableDir, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFsimage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFsimage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFsimage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SnapshottableDir = append(m.SnapshottableDir, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshottableDir", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSnapshots", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumSnapshots = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotSection_Snapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnapshotId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Root == nil {
				m.Root = &INodeSection_INode{}
			}
			if err := m.Root.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotDiffSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotDiffSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotDiffSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotDiffSection_CreatedListEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatedListEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatedListEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotDiffSection_DirectoryDiff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryDiff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryDiff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnapshotId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildrenSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChildrenSize = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSnapshotRoot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSnapshotRoot = &b
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotCopy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SnapshotCopy == nil {
				m.SnapshotCopy = &INodeSection_INodeDirectory{}
			}
			if err := m.SnapshotCopy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedListSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreatedListSize = &v
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFsimage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DeletedINode = append(m.DeletedINode, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFsimage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFsimage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFsimage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DeletedINode = append(m.DeletedINode, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedINode", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFsimage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DeletedINodeRef = append(m.DeletedINodeRef, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFsimage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFsimage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFsimage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DeletedINodeRef = append(m.DeletedINodeRef, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedINodeRef", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotDiffSection_FileDiff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileDiff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileDiff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnapshotId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FileSize = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotCopy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SnapshotCopy == nil {
				m.SnapshotCopy = &INodeSection_INodeFile{}
			}
			if err := m.SnapshotCopy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotDiffSection_DiffEntry) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiffEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiffEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v SnapshotDiffSection_DiffEntry_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (SnapshotDiffSection_DiffEntry_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InodeId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InodeId = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOfDiff", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumOfDiff = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringTableSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringTableSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringTableSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEntry", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumEntry = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringTableSection_Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Str = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretManagerSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretManagerSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretManagerSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurrentId = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSequenceNumber", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TokenSequenceNumber = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumKeys", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumKeys = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTokens", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumTokens = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretManagerSection_DelegationKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryDate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpiryDate = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretManagerSection_PersistToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Renewer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Renewer = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFsimage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RealUser = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueDate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IssueDate = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxDate = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SequenceNumber = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterKeyId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MasterKeyId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryDate", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpiryDate = &v
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheManagerSection) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheManagerSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheManagerSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextDirectiveId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NextDirectiveId = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPools", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumPools = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDirectives", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumDirectives = &v
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipFsimage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFsimage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("nextDirectiveId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("numPools")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("numDirectives")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFsimage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFsimage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFsimage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFsimage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFsimage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFsimage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFsimage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFsimage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("fsimage/fsimage.proto", fileDescriptorFsimage) }

var fileDescriptorFsimage = []byte{
	// 1719 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0x57, 0xf7, 0xb4, 0xe7, 0xe3, 0x79, 0xc6, 0x9e, 0x54, 0xb2, 0xd9, 0x51, 0x2b, 0x58, 0xd6,
	0x28, 0xca, 0x0e, 0x10, 0x4d, 0x76, 0xcd, 0x01, 0x24, 0xc4, 0x47, 0x3c, 0x8e, 0xc5, 0xc8, 0x89,
	0x93, 0xed, 0x71, 0x22, 0x56, 0x5c, 0xa8, 0x74, 0xd7, 0xcc, 0xb4, 0xdc, 0x5f, 0x54, 0x55, 0x7b,
	0x33, 0xdc, 0x90, 0x38, 0x71, 0x41, 0xe2, 0xc0, 0x19, 0x71, 0x85, 0x1b, 0x27, 0xfe, 0x03, 0x8e,
	0xfc, 0x09, 0x28, 0x82, 0x7f, 0x01, 0x71, 0x44, 0xaf, 0xba, 0xaa, 0xa7, 0x7b, 0x3c, 0x8b, 0xad,
	0xb0, 0x27, 0xcf, 0xfb, 0xd5, 0xab, 0x57, 0xef, 0xe3, 0xf7, 0x5e, 0x55, 0x1b, 0x3e, 0x9a, 0x8b,
	0x30, 0xa6, 0x0b, 0xf6, 0x44, 0xff, 0x1d, 0x67, 0x3c, 0x95, 0x29, 0xb9, 0xbb, 0xa4, 0x41, 0x9a,
	0x66, 0xe3, 0x65, 0x30, 0x17, 0x63, 0xbd, 0xe4, 0x82, 0x92, 0x94, 0xc2, 0xf0, 0xd7, 0x36, 0xec,
	0x9e, 0x86, 0x11, 0x9b, 0xe5, 0x71, 0x4c, 0xf9, 0x8a, 0x3c, 0x84, 0x5e, 0x9a, 0x04, 0xa1, 0xb8,
	0x7c, 0xc3, 0xb8, 0x08, 0xd3, 0x64, 0x60, 0x1d, 0xda, 0xa3, 0x9e, 0x57, 0x07, 0x51, 0x2b, 0xa2,
	0xab, 0x34, 0x97, 0x46, 0xcb, 0x2e, 0xb4, 0x6a, 0x20, 0xb9, 0x07, 0x3b, 0x7e, 0x1a, 0x30, 0x7f,
	0xd0, 0x38, 0xb4, 0x46, 0x1d, 0xaf, 0x10, 0xc8, 0x09, 0xb4, 0x05, 0xf3, 0x65, 0x98, 0x26, 0x62,
	0xe0, 0x1c, 0x36, 0x46, 0xbb, 0x47, 0xa3, 0xf1, 0x16, 0x2f, 0xc7, 0x15, 0xaf, 0xc6, 0xb3, 0x62,
	0x83, 0x57, 0xee, 0x74, 0x5f, 0x40, 0x4b, 0x83, 0x84, 0x80, 0x93, 0xd0, 0x98, 0x0d, 0x2c, 0x75,
	0x8a, 0xfa, 0x4d, 0xee, 0x43, 0x33, 0x62, 0xc9, 0x42, 0x2e, 0x07, 0xf6, 0xa1, 0x35, 0x72, 0x3c,
	0x2d, 0x21, 0x9e, 0xce, 0xe7, 0x82, 0x49, 0xe5, 0x93, 0xe3, 0x69, 0x69, 0xf8, 0x17, 0x1b, 0xee,
	0x9c, 0xd3, 0x98, 0xcd, 0x56, 0x42, 0xb2, 0xd8, 0x58, 0x3e, 0x84, 0x5d, 0xb4, 0x26, 0x32, 0xea,
	0xb3, 0x69, 0xa0, 0x0e, 0xe8, 0x79, 0x55, 0x88, 0x1c, 0x00, 0x2c, 0x58, 0x22, 0x24, 0x8d, 0xb3,
	0x37, 0x9f, 0xe9, 0xb3, 0x2a, 0x48, 0x6d, 0xfd, 0x48, 0x9f, 0x59, 0x41, 0xc8, 0x08, 0xf6, 0xd7,
	0xda, 0xcf, 0xc3, 0x38, 0x94, 0x03, 0x47, 0x29, 0x6d, 0xc2, 0xe4, 0x08, 0xee, 0x45, 0x54, 0xc8,
	0xa7, 0x51, 0x94, 0xfa, 0x54, 0xb2, 0xe0, 0x38, 0x4a, 0xfd, 0xcb, 0x69, 0x30, 0xd8, 0x51, 0xea,
	0x5b, 0xd7, 0xb0, 0x4c, 0x92, 0xd3, 0x44, 0x50, 0x15, 0xce, 0x34, 0x18, 0x34, 0x95, 0x72, 0x1d,
	0x24, 0xdf, 0x83, 0x8f, 0x79, 0x1a, 0x45, 0x61, 0xb2, 0x78, 0x9d, 0x2d, 0x38, 0x0d, 0xd8, 0x4c,
	0x52, 0x2e, 0x2f, 0xc2, 0x98, 0x0d, 0x5a, 0x4a, 0xff, 0xab, 0x96, 0x87, 0x7f, 0xe8, 0x41, 0x77,
	0x7a, 0x9e, 0x06, 0xac, 0x92, 0x30, 0x74, 0x64, 0x9a, 0xa4, 0x81, 0x49, 0x98, 0xe3, 0x55, 0x21,
	0xf2, 0x00, 0x3a, 0x49, 0x1e, 0x2b, 0x49, 0xe8, 0x7c, 0xad, 0x01, 0x37, 0x80, 0x07, 0x58, 0xf6,
	0xd7, 0x49, 0xc0, 0xf8, 0x24, 0x4d, 0x84, 0xe4, 0xb9, 0x32, 0x7c, 0xca, 0xa8, 0xcc, 0x39, 0xc3,
	0x74, 0xfa, 0x51, 0xc8, 0x12, 0x79, 0xbe, 0x2e, 0x78, 0x05, 0xc1, 0x80, 0x0b, 0xe9, 0x05, 0xf5,
	0x97, 0x61, 0xc2, 0xd4, 0x09, 0x1d, 0xaf, 0x0e, 0xba, 0x4f, 0x60, 0xff, 0xa9, 0x1f, 0x69, 0x9b,
	0xaf, 0x54, 0x9f, 0x3c, 0x80, 0x16, 0x4b, 0x24, 0x0f, 0x95, 0x53, 0x8d, 0x51, 0xeb, 0xd8, 0xee,
	0x5b, 0x9e, 0x81, 0xdc, 0x1f, 0xc0, 0x9d, 0x9f, 0x3e, 0x95, 0x92, 0x4f, 0xd2, 0x38, 0xa3, 0xbe,
	0x2c, 0xb6, 0xac, 0x69, 0x67, 0x8f, 0x5a, 0x9a, 0x76, 0xf7, 0x60, 0xe7, 0x8a, 0x46, 0x79, 0x71,
	0x6e, 0xd7, 0x2b, 0x04, 0xf7, 0xe7, 0x7a, 0x7b, 0xed, 0xc4, 0x33, 0x68, 0xbe, 0x43, 0x50, 0x0c,
	0x2c, 0xd5, 0x04, 0xdf, 0xd9, 0xda, 0x04, 0xd5, 0xec, 0x8e, 0xaf, 0xf9, 0xe0, 0x69, 0x13, 0xee,
	0x3f, 0x1b, 0xd0, 0x51, 0xaa, 0x98, 0x3d, 0xac, 0x02, 0x67, 0x59, 0x14, 0xfa, 0x54, 0x16, 0x1d,
	0xac, 0x68, 0x5b, 0x81, 0xc8, 0xb7, 0xa0, 0x1f, 0xa7, 0x41, 0x38, 0xd7, 0xb2, 0xaa, 0x75, 0x51,
	0x8c, 0x6b, 0x38, 0xe6, 0x9c, 0xfa, 0x3e, 0x13, 0x42, 0x69, 0x69, 0x0a, 0xaf, 0x11, 0x32, 0x06,
	0x92, 0x71, 0x36, 0x67, 0x9c, 0x6b, 0xe2, 0xcd, 0xc2, 0x5f, 0x32, 0xcd, 0xe2, 0x2d, 0x2b, 0x68,
	0x2f, 0x63, 0x3c, 0x0e, 0x85, 0x1a, 0x1c, 0x48, 0xdf, 0xa6, 0x57, 0x41, 0xc8, 0x13, 0x68, 0xbe,
	0x45, 0x65, 0x31, 0x68, 0xaa, 0xc4, 0x7c, 0x5c, 0x4b, 0x8c, 0xb2, 0xa3, 0x83, 0x2f, 0xd4, 0xc8,
	0x1b, 0x68, 0xce, 0x91, 0x34, 0x13, 0x45, 0xd7, 0xdd, 0xa3, 0x1f, 0xde, 0x9c, 0xc9, 0xff, 0x45,
	0x32, 0x4f, 0x5b, 0x23, 0x13, 0x68, 0x50, 0x3f, 0x1a, 0xb4, 0x95, 0xd1, 0xcf, 0x6e, 0x36, 0xba,
	0xc1, 0x29, 0x0f, 0x77, 0x57, 0xca, 0xdc, 0x51, 0x76, 0x6e, 0x5b, 0xe6, 0x9a, 0x25, 0x53, 0xe6,
	0x3f, 0xda, 0xb0, 0xa7, 0x54, 0x4f, 0x42, 0xce, 0x7c, 0x99, 0xf2, 0xd5, 0xd6, 0x4a, 0x5a, 0x5f,
	0x51, 0xc9, 0x01, 0xb4, 0x12, 0xf1, 0x79, 0x9e, 0x4a, 0xaa, 0x8b, 0x6d, 0x44, 0x5c, 0x09, 0xf4,
	0x4a, 0x51, 0x60, 0x23, 0x6e, 0x54, 0xcb, 0xb9, 0x56, 0x2d, 0x9d, 0xa4, 0x9d, 0xaf, 0x29, 0x49,
	0xcd, 0xff, 0x3f, 0x49, 0xbf, 0xb3, 0xcc, 0x50, 0x5a, 0xc5, 0x51, 0x98, 0x5c, 0x6e, 0x84, 0x60,
	0x5d, 0x0b, 0xe1, 0x3e, 0x34, 0x25, 0xe5, 0x0b, 0x26, 0x75, 0xd7, 0x6a, 0x69, 0x6b, 0x6a, 0x1b,
	0xb7, 0x6a, 0x12, 0x67, 0xb3, 0x49, 0xdc, 0x7f, 0xdb, 0xb0, 0xa3, 0x9c, 0x22, 0x3f, 0x06, 0x47,
	0xae, 0xb2, 0x62, 0x6c, 0xec, 0x1d, 0x3d, 0xbe, 0x39, 0x52, 0x25, 0x8c, 0x2f, 0x56, 0x19, 0xf3,
	0xd4, 0x4e, 0xb2, 0x07, 0x76, 0x18, 0xa8, 0x1b, 0xd7, 0xf1, 0xec, 0x30, 0x28, 0x07, 0x51, 0x43,
	0x79, 0x5f, 0x0c, 0xa2, 0x1f, 0x81, 0x83, 0x2c, 0x56, 0x9e, 0xec, 0x1e, 0x7d, 0xfb, 0x96, 0xa7,
	0x60, 0x5b, 0x78, 0x6a, 0x23, 0x39, 0x87, 0x4e, 0x60, 0x48, 0xa6, 0xab, 0xfb, 0xe9, 0x2d, 0xad,
	0x94, 0xe4, 0xf4, 0xd6, 0x26, 0xc8, 0x4f, 0xa0, 0x25, 0x8a, 0x7a, 0xe8, 0x1a, 0x8f, 0x6f, 0x69,
	0x4d, 0x57, 0xd1, 0x33, 0xdb, 0x87, 0x8f, 0xc1, 0xc1, 0x64, 0x90, 0x36, 0x38, 0xa7, 0xd3, 0xe7,
	0xcf, 0xfa, 0x16, 0xe9, 0x41, 0xe7, 0x64, 0xea, 0x3d, 0x9b, 0x5c, 0xbc, 0xf4, 0xbe, 0xe8, 0xdb,
	0x64, 0x17, 0x5a, 0xb3, 0x2f, 0x5e, 0x3c, 0x9f, 0x9e, 0x9f, 0xf5, 0x1b, 0x43, 0x01, 0xdf, 0xc0,
	0xa8, 0xc4, 0xb5, 0x6e, 0xd7, 0x87, 0xb8, 0x1e, 0xb8, 0x5b, 0xa7, 0xc1, 0xb3, 0x44, 0xf2, 0x15,
	0x36, 0x46, 0x58, 0xbb, 0xcc, 0x8c, 0x48, 0x5c, 0x68, 0xcf, 0xf3, 0x28, 0x7a, 0x45, 0xf5, 0x1b,
	0xa3, 0xe3, 0x95, 0xf2, 0xf0, 0x57, 0x16, 0x7c, 0x54, 0x4f, 0x85, 0x39, 0x6d, 0x09, 0xed, 0x93,
	0x90, 0x17, 0xb6, 0xef, 0x43, 0x33, 0xa3, 0x9c, 0x25, 0x52, 0x9b, 0xd6, 0x12, 0x39, 0x80, 0xb6,
	0xbf, 0x0c, 0xa3, 0x80, 0xb3, 0x44, 0x5d, 0x46, 0x8e, 0xba, 0x8c, 0x4a, 0x8c, 0x3c, 0xc4, 0xf1,
	0x3e, 0x9f, 0x18, 0x95, 0xc6, 0x61, 0x63, 0xd4, 0x53, 0x2a, 0x55, 0x78, 0xf8, 0x67, 0xe3, 0x83,
	0x87, 0x13, 0x98, 0x25, 0xbe, 0x49, 0x2b, 0x36, 0xc8, 0x5e, 0x7d, 0x05, 0xe9, 0x6b, 0x06, 0x75,
	0x19, 0x69, 0x05, 0x29, 0x29, 0x66, 0x57, 0x28, 0xf6, 0x10, 0x7a, 0x81, 0x90, 0xb3, 0x84, 0x66,
	0x62, 0x99, 0xca, 0x69, 0xa0, 0xf8, 0xd7, 0xf3, 0xea, 0x20, 0x79, 0x04, 0x7b, 0x78, 0xfd, 0x57,
	0xd4, 0x1c, 0xa5, 0xb6, 0x81, 0x0e, 0xff, 0x63, 0xc1, 0xbe, 0x11, 0xcd, 0x6b, 0x62, 0x04, 0xfb,
	0x42, 0x43, 0x93, 0x34, 0x4f, 0x24, 0xe3, 0xfa, 0x2e, 0xdb, 0x84, 0xc9, 0x18, 0xfa, 0x06, 0x92,
	0xf4, 0x6d, 0x84, 0x79, 0xaf, 0xa4, 0xee, 0xda, 0x1a, 0x19, 0x42, 0x37, 0xc9, 0x63, 0x73, 0x9e,
	0xd0, 0xae, 0xd7, 0x30, 0x77, 0x01, 0x6d, 0x23, 0x60, 0x7e, 0xc4, 0x3a, 0x82, 0xc2, 0x89, 0x0a,
	0x42, 0xbe, 0x0f, 0x0e, 0x4f, 0xd3, 0x62, 0x80, 0xec, 0x1e, 0x7d, 0x72, 0x4b, 0x6a, 0x7b, 0x6a,
	0xd3, 0xf0, 0xb7, 0x4d, 0xb8, 0x6b, 0x4e, 0x3a, 0x09, 0xe7, 0x73, 0x53, 0xa7, 0x47, 0xd0, 0x9f,
	0x70, 0x86, 0xef, 0xb9, 0xe7, 0xa1, 0x90, 0x05, 0x67, 0xaa, 0x6f, 0x5d, 0x5d, 0x08, 0xf7, 0x5f,
	0x36, 0xf4, 0x4a, 0xa2, 0xa1, 0x81, 0x1b, 0xdd, 0x1d, 0x42, 0xd7, 0xb0, 0x49, 0x5d, 0xd6, 0x76,
	0x11, 0x7e, 0x15, 0xc3, 0xc2, 0x85, 0xc2, 0xb8, 0xe5, 0x61, 0x70, 0x98, 0xa4, 0xb6, 0xb7, 0x81,
	0x96, 0x1e, 0x39, 0x15, 0x6a, 0x5c, 0x40, 0x77, 0x5d, 0xa1, 0xec, 0xc3, 0xe7, 0x47, 0xcd, 0x0a,
	0xd2, 0xc1, 0x5f, 0xe7, 0x43, 0x39, 0xde, 0x2c, 0xe8, 0xb0, 0x01, 0x93, 0x47, 0xd0, 0x0d, 0x58,
	0xc4, 0x24, 0x0b, 0x94, 0xc1, 0x41, 0xab, 0xa4, 0x42, 0x0d, 0x27, 0x8f, 0x61, 0xbf, 0x2a, 0x7b,
	0x6c, 0x3e, 0x68, 0x97, 0xdd, 0xb4, 0xb9, 0xe4, 0xfe, 0xc9, 0x82, 0x36, 0x8e, 0x8a, 0x5b, 0xa5,
	0x18, 0xc7, 0x03, 0x7e, 0xc0, 0x98, 0xf4, 0x3a, 0x5e, 0x29, 0x6f, 0x1d, 0xd8, 0x2f, 0x37, 0x52,
	0xf6, 0x01, 0x83, 0xbb, 0x66, 0xc0, 0xfd, 0xab, 0x05, 0x1d, 0xf4, 0xb4, 0xe0, 0xcd, 0x59, 0xed,
	0xd6, 0xf9, 0xee, 0x56, 0xb3, 0x5b, 0x38, 0x38, 0x2e, 0x2d, 0x54, 0x2f, 0xa0, 0xca, 0x50, 0xb4,
	0xeb, 0x43, 0xb1, 0x78, 0xdd, 0xbf, 0x9c, 0xe3, 0x36, 0xdd, 0x54, 0x6b, 0x60, 0xf8, 0x89, 0x9e,
	0xdc, 0x5d, 0x68, 0xe3, 0xe4, 0x3e, 0x99, 0x9e, 0x9e, 0xf6, 0x2d, 0x72, 0x07, 0x7a, 0xe5, 0xf4,
	0x56, 0x90, 0x3d, 0xfc, 0x19, 0x90, 0x99, 0xe4, 0x61, 0xb2, 0xb8, 0xc0, 0x86, 0x35, 0xe3, 0xc0,
	0x85, 0x76, 0x92, 0xc7, 0xca, 0x1b, 0x9d, 0xf0, 0x52, 0x76, 0xbf, 0x09, 0x3b, 0x45, 0xa0, 0xc5,
	0xe5, 0x58, 0x2c, 0xe3, 0xe5, 0xd8, 0x87, 0x86, 0x90, 0x5c, 0x4f, 0x68, 0xfc, 0x39, 0xfc, 0x8d,
	0x03, 0xf7, 0x66, 0xcc, 0xe7, 0x4c, 0xbe, 0xa0, 0x09, 0x5d, 0x30, 0x6e, 0xec, 0x3f, 0x80, 0x8e,
	0x9f, 0x73, 0x1c, 0xc1, 0x65, 0x45, 0xd7, 0x00, 0xf9, 0x14, 0xee, 0xca, 0xf4, 0x92, 0x25, 0x33,
	0xf6, 0x8b, 0x1c, 0x67, 0xe6, 0x79, 0x1e, 0xbf, 0x65, 0x5c, 0xb7, 0xce, 0xb6, 0x25, 0xf5, 0xdc,
	0xca, 0xe3, 0x33, 0xb6, 0x32, 0xf3, 0xc5, 0x88, 0x3a, 0x4d, 0x17, 0xb8, 0x47, 0xe8, 0x79, 0xb8,
	0x06, 0xdc, 0xcf, 0xa1, 0x77, 0xc2, 0x22, 0xb6, 0x50, 0xaf, 0x8b, 0x33, 0x76, 0x3d, 0xa6, 0x03,
	0x00, 0xf6, 0x2e, 0x0b, 0xf9, 0xea, 0x84, 0x4a, 0xc3, 0xae, 0x0a, 0x82, 0x31, 0x5f, 0xb2, 0x95,
	0xa6, 0x17, 0xfe, 0x74, 0x7f, 0x6f, 0x43, 0xf7, 0x15, 0x7e, 0x95, 0x0b, 0xa9, 0x0e, 0x41, 0xdf,
	0xae, 0xca, 0x0f, 0x7c, 0xe5, 0xdb, 0xd5, 0xfa, 0xa3, 0x3d, 0xfd, 0x32, 0x61, 0x26, 0x65, 0x85,
	0x80, 0xfa, 0x9c, 0x25, 0xec, 0x4b, 0xc6, 0xf5, 0xc7, 0xbc, 0x11, 0xb1, 0x2a, 0x9c, 0xd1, 0xe8,
	0xb5, 0x60, 0x5c, 0x85, 0xd2, 0xf1, 0x4a, 0x19, 0xe3, 0x0c, 0x85, 0xc8, 0x99, 0xf2, 0xb3, 0xf8,
	0x50, 0x5d, 0x03, 0x68, 0x33, 0xa6, 0xef, 0xd4, 0x5a, 0xf1, 0x5d, 0x6a, 0x44, 0x9c, 0x3d, 0xa2,
	0x9e, 0xe6, 0x56, 0x71, 0x69, 0xd4, 0x51, 0xfc, 0xd0, 0x89, 0xa9, 0x90, 0x8c, 0x9f, 0xb1, 0xd5,
	0x34, 0x50, 0x2f, 0xf5, 0x9e, 0x57, 0x85, 0x36, 0x52, 0xd5, 0xd9, 0x4c, 0x15, 0xde, 0xd4, 0x77,
	0x27, 0xd4, 0x5f, 0xb2, 0x0d, 0x2e, 0x8c, 0x60, 0x3f, 0x61, 0xef, 0x64, 0x31, 0x8a, 0xc2, 0xab,
	0xe2, 0xfe, 0xc7, 0x07, 0xd7, 0x26, 0xac, 0x59, 0xf9, 0x2a, 0x4d, 0x23, 0xa1, 0xff, 0x0b, 0x52,
	0xca, 0x78, 0x45, 0x26, 0x79, 0x5c, 0x6a, 0x23, 0x0f, 0xd4, 0xbf, 0x49, 0x6a, 0xe0, 0xf1, 0xf1,
	0xdf, 0xde, 0x1f, 0x58, 0x7f, 0x7f, 0x7f, 0x60, 0xfd, 0xe3, 0xfd, 0x81, 0x05, 0x8f, 0x52, 0xbe,
	0x18, 0xd3, 0x0c, 0x7d, 0xaa, 0x75, 0xa9, 0x60, 0xfc, 0x8a, 0xf1, 0x31, 0x0e, 0x0b, 0x6c, 0xb6,
	0xe3, 0xee, 0xa9, 0x98, 0x62, 0xdb, 0xaa, 0xc7, 0xef, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb2,
	0x90, 0xb3, 0xea, 0xff, 0x11, 0x00, 0x00,
}
