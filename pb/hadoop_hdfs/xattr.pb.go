// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xattr.proto

package hadoop_hdfs

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type XAttrSetFlagProto int32

const (
	XAttrSetFlagProto_XATTR_CREATE  XAttrSetFlagProto = 1
	XAttrSetFlagProto_XATTR_REPLACE XAttrSetFlagProto = 2
)

var XAttrSetFlagProto_name = map[int32]string{
	1: "XATTR_CREATE",
	2: "XATTR_REPLACE",
}
var XAttrSetFlagProto_value = map[string]int32{
	"XATTR_CREATE":  1,
	"XATTR_REPLACE": 2,
}

func (x XAttrSetFlagProto) Enum() *XAttrSetFlagProto {
	p := new(XAttrSetFlagProto)
	*p = x
	return p
}
func (x XAttrSetFlagProto) String() string {
	return proto.EnumName(XAttrSetFlagProto_name, int32(x))
}
func (x *XAttrSetFlagProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(XAttrSetFlagProto_value, data, "XAttrSetFlagProto")
	if err != nil {
		return err
	}
	*x = XAttrSetFlagProto(value)
	return nil
}
func (XAttrSetFlagProto) EnumDescriptor() ([]byte, []int) { return fileDescriptorXattr, []int{0} }

type XAttrProto_XAttrNamespaceProto int32

const (
	XAttrProto_USER     XAttrProto_XAttrNamespaceProto = 0
	XAttrProto_TRUSTED  XAttrProto_XAttrNamespaceProto = 1
	XAttrProto_SECURITY XAttrProto_XAttrNamespaceProto = 2
	XAttrProto_SYSTEM   XAttrProto_XAttrNamespaceProto = 3
	XAttrProto_RAW      XAttrProto_XAttrNamespaceProto = 4
)

var XAttrProto_XAttrNamespaceProto_name = map[int32]string{
	0: "USER",
	1: "TRUSTED",
	2: "SECURITY",
	3: "SYSTEM",
	4: "RAW",
}
var XAttrProto_XAttrNamespaceProto_value = map[string]int32{
	"USER":     0,
	"TRUSTED":  1,
	"SECURITY": 2,
	"SYSTEM":   3,
	"RAW":      4,
}

func (x XAttrProto_XAttrNamespaceProto) Enum() *XAttrProto_XAttrNamespaceProto {
	p := new(XAttrProto_XAttrNamespaceProto)
	*p = x
	return p
}
func (x XAttrProto_XAttrNamespaceProto) String() string {
	return proto.EnumName(XAttrProto_XAttrNamespaceProto_name, int32(x))
}
func (x *XAttrProto_XAttrNamespaceProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(XAttrProto_XAttrNamespaceProto_value, data, "XAttrProto_XAttrNamespaceProto")
	if err != nil {
		return err
	}
	*x = XAttrProto_XAttrNamespaceProto(value)
	return nil
}
func (XAttrProto_XAttrNamespaceProto) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorXattr, []int{0, 0}
}

type XAttrProto struct {
	Namespace        *XAttrProto_XAttrNamespaceProto `protobuf:"varint,1,req,name=namespace,enum=hadoop.hdfs.XAttrProto_XAttrNamespaceProto" json:"namespace,omitempty"`
	Name             *string                         `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Value            []byte                          `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *XAttrProto) Reset()                    { *m = XAttrProto{} }
func (m *XAttrProto) String() string            { return proto.CompactTextString(m) }
func (*XAttrProto) ProtoMessage()               {}
func (*XAttrProto) Descriptor() ([]byte, []int) { return fileDescriptorXattr, []int{0} }

func (m *XAttrProto) GetNamespace() XAttrProto_XAttrNamespaceProto {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return XAttrProto_USER
}

func (m *XAttrProto) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *XAttrProto) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type XAttrEditLogProto struct {
	Src              *string       `protobuf:"bytes,1,opt,name=src" json:"src,omitempty"`
	XAttrs           []*XAttrProto `protobuf:"bytes,2,rep,name=xAttrs" json:"xAttrs,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *XAttrEditLogProto) Reset()                    { *m = XAttrEditLogProto{} }
func (m *XAttrEditLogProto) String() string            { return proto.CompactTextString(m) }
func (*XAttrEditLogProto) ProtoMessage()               {}
func (*XAttrEditLogProto) Descriptor() ([]byte, []int) { return fileDescriptorXattr, []int{1} }

func (m *XAttrEditLogProto) GetSrc() string {
	if m != nil && m.Src != nil {
		return *m.Src
	}
	return ""
}

func (m *XAttrEditLogProto) GetXAttrs() []*XAttrProto {
	if m != nil {
		return m.XAttrs
	}
	return nil
}

type SetXAttrRequestProto struct {
	Src              *string     `protobuf:"bytes,1,req,name=src" json:"src,omitempty"`
	XAttr            *XAttrProto `protobuf:"bytes,2,opt,name=xAttr" json:"xAttr,omitempty"`
	Flag             *uint32     `protobuf:"varint,3,opt,name=flag" json:"flag,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SetXAttrRequestProto) Reset()                    { *m = SetXAttrRequestProto{} }
func (m *SetXAttrRequestProto) String() string            { return proto.CompactTextString(m) }
func (*SetXAttrRequestProto) ProtoMessage()               {}
func (*SetXAttrRequestProto) Descriptor() ([]byte, []int) { return fileDescriptorXattr, []int{2} }

func (m *SetXAttrRequestProto) GetSrc() string {
	if m != nil && m.Src != nil {
		return *m.Src
	}
	return ""
}

func (m *SetXAttrRequestProto) GetXAttr() *XAttrProto {
	if m != nil {
		return m.XAttr
	}
	return nil
}

func (m *SetXAttrRequestProto) GetFlag() uint32 {
	if m != nil && m.Flag != nil {
		return *m.Flag
	}
	return 0
}

type SetXAttrResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SetXAttrResponseProto) Reset()                    { *m = SetXAttrResponseProto{} }
func (m *SetXAttrResponseProto) String() string            { return proto.CompactTextString(m) }
func (*SetXAttrResponseProto) ProtoMessage()               {}
func (*SetXAttrResponseProto) Descriptor() ([]byte, []int) { return fileDescriptorXattr, []int{3} }

type GetXAttrsRequestProto struct {
	Src              *string       `protobuf:"bytes,1,req,name=src" json:"src,omitempty"`
	XAttrs           []*XAttrProto `protobuf:"bytes,2,rep,name=xAttrs" json:"xAttrs,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *GetXAttrsRequestProto) Reset()                    { *m = GetXAttrsRequestProto{} }
func (m *GetXAttrsRequestProto) String() string            { return proto.CompactTextString(m) }
func (*GetXAttrsRequestProto) ProtoMessage()               {}
func (*GetXAttrsRequestProto) Descriptor() ([]byte, []int) { return fileDescriptorXattr, []int{4} }

func (m *GetXAttrsRequestProto) GetSrc() string {
	if m != nil && m.Src != nil {
		return *m.Src
	}
	return ""
}

func (m *GetXAttrsRequestProto) GetXAttrs() []*XAttrProto {
	if m != nil {
		return m.XAttrs
	}
	return nil
}

type GetXAttrsResponseProto struct {
	XAttrs           []*XAttrProto `protobuf:"bytes,1,rep,name=xAttrs" json:"xAttrs,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *GetXAttrsResponseProto) Reset()                    { *m = GetXAttrsResponseProto{} }
func (m *GetXAttrsResponseProto) String() string            { return proto.CompactTextString(m) }
func (*GetXAttrsResponseProto) ProtoMessage()               {}
func (*GetXAttrsResponseProto) Descriptor() ([]byte, []int) { return fileDescriptorXattr, []int{5} }

func (m *GetXAttrsResponseProto) GetXAttrs() []*XAttrProto {
	if m != nil {
		return m.XAttrs
	}
	return nil
}

type ListXAttrsRequestProto struct {
	Src              *string `protobuf:"bytes,1,req,name=src" json:"src,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListXAttrsRequestProto) Reset()                    { *m = ListXAttrsRequestProto{} }
func (m *ListXAttrsRequestProto) String() string            { return proto.CompactTextString(m) }
func (*ListXAttrsRequestProto) ProtoMessage()               {}
func (*ListXAttrsRequestProto) Descriptor() ([]byte, []int) { return fileDescriptorXattr, []int{6} }

func (m *ListXAttrsRequestProto) GetSrc() string {
	if m != nil && m.Src != nil {
		return *m.Src
	}
	return ""
}

type ListXAttrsResponseProto struct {
	XAttrs           []*XAttrProto `protobuf:"bytes,1,rep,name=xAttrs" json:"xAttrs,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ListXAttrsResponseProto) Reset()                    { *m = ListXAttrsResponseProto{} }
func (m *ListXAttrsResponseProto) String() string            { return proto.CompactTextString(m) }
func (*ListXAttrsResponseProto) ProtoMessage()               {}
func (*ListXAttrsResponseProto) Descriptor() ([]byte, []int) { return fileDescriptorXattr, []int{7} }

func (m *ListXAttrsResponseProto) GetXAttrs() []*XAttrProto {
	if m != nil {
		return m.XAttrs
	}
	return nil
}

type RemoveXAttrRequestProto struct {
	Src              *string     `protobuf:"bytes,1,req,name=src" json:"src,omitempty"`
	XAttr            *XAttrProto `protobuf:"bytes,2,opt,name=xAttr" json:"xAttr,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *RemoveXAttrRequestProto) Reset()                    { *m = RemoveXAttrRequestProto{} }
func (m *RemoveXAttrRequestProto) String() string            { return proto.CompactTextString(m) }
func (*RemoveXAttrRequestProto) ProtoMessage()               {}
func (*RemoveXAttrRequestProto) Descriptor() ([]byte, []int) { return fileDescriptorXattr, []int{8} }

func (m *RemoveXAttrRequestProto) GetSrc() string {
	if m != nil && m.Src != nil {
		return *m.Src
	}
	return ""
}

func (m *RemoveXAttrRequestProto) GetXAttr() *XAttrProto {
	if m != nil {
		return m.XAttr
	}
	return nil
}

type RemoveXAttrResponseProto struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RemoveXAttrResponseProto) Reset()                    { *m = RemoveXAttrResponseProto{} }
func (m *RemoveXAttrResponseProto) String() string            { return proto.CompactTextString(m) }
func (*RemoveXAttrResponseProto) ProtoMessage()               {}
func (*RemoveXAttrResponseProto) Descriptor() ([]byte, []int) { return fileDescriptorXattr, []int{9} }

func init() {
	proto.RegisterType((*XAttrProto)(nil), "hadoop.hdfs.XAttrProto")
	proto.RegisterType((*XAttrEditLogProto)(nil), "hadoop.hdfs.XAttrEditLogProto")
	proto.RegisterType((*SetXAttrRequestProto)(nil), "hadoop.hdfs.SetXAttrRequestProto")
	proto.RegisterType((*SetXAttrResponseProto)(nil), "hadoop.hdfs.SetXAttrResponseProto")
	proto.RegisterType((*GetXAttrsRequestProto)(nil), "hadoop.hdfs.GetXAttrsRequestProto")
	proto.RegisterType((*GetXAttrsResponseProto)(nil), "hadoop.hdfs.GetXAttrsResponseProto")
	proto.RegisterType((*ListXAttrsRequestProto)(nil), "hadoop.hdfs.ListXAttrsRequestProto")
	proto.RegisterType((*ListXAttrsResponseProto)(nil), "hadoop.hdfs.ListXAttrsResponseProto")
	proto.RegisterType((*RemoveXAttrRequestProto)(nil), "hadoop.hdfs.RemoveXAttrRequestProto")
	proto.RegisterType((*RemoveXAttrResponseProto)(nil), "hadoop.hdfs.RemoveXAttrResponseProto")
	proto.RegisterEnum("hadoop.hdfs.XAttrSetFlagProto", XAttrSetFlagProto_name, XAttrSetFlagProto_value)
	proto.RegisterEnum("hadoop.hdfs.XAttrProto_XAttrNamespaceProto", XAttrProto_XAttrNamespaceProto_name, XAttrProto_XAttrNamespaceProto_value)
}
func (m *XAttrProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XAttrProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Namespace == nil {
		return 0, proto.NewRequiredNotSetError("namespace")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXattr(dAtA, i, uint64(*m.Namespace))
	}
	if m.Name == nil {
		return 0, proto.NewRequiredNotSetError("name")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXattr(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Value != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXattr(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *XAttrEditLogProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XAttrEditLogProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Src != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXattr(dAtA, i, uint64(len(*m.Src)))
		i += copy(dAtA[i:], *m.Src)
	}
	if len(m.XAttrs) > 0 {
		for _, msg := range m.XAttrs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintXattr(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetXAttrRequestProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetXAttrRequestProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Src == nil {
		return 0, proto.NewRequiredNotSetError("src")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXattr(dAtA, i, uint64(len(*m.Src)))
		i += copy(dAtA[i:], *m.Src)
	}
	if m.XAttr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXattr(dAtA, i, uint64(m.XAttr.Size()))
		n1, err := m.XAttr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Flag != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXattr(dAtA, i, uint64(*m.Flag))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetXAttrResponseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetXAttrResponseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetXAttrsRequestProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetXAttrsRequestProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Src == nil {
		return 0, proto.NewRequiredNotSetError("src")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXattr(dAtA, i, uint64(len(*m.Src)))
		i += copy(dAtA[i:], *m.Src)
	}
	if len(m.XAttrs) > 0 {
		for _, msg := range m.XAttrs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintXattr(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetXAttrsResponseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetXAttrsResponseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.XAttrs) > 0 {
		for _, msg := range m.XAttrs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintXattr(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListXAttrsRequestProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListXAttrsRequestProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Src == nil {
		return 0, proto.NewRequiredNotSetError("src")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXattr(dAtA, i, uint64(len(*m.Src)))
		i += copy(dAtA[i:], *m.Src)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListXAttrsResponseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListXAttrsResponseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.XAttrs) > 0 {
		for _, msg := range m.XAttrs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintXattr(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveXAttrRequestProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveXAttrRequestProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Src == nil {
		return 0, proto.NewRequiredNotSetError("src")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXattr(dAtA, i, uint64(len(*m.Src)))
		i += copy(dAtA[i:], *m.Src)
	}
	if m.XAttr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXattr(dAtA, i, uint64(m.XAttr.Size()))
		n2, err := m.XAttr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveXAttrResponseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveXAttrResponseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintXattr(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *XAttrProto) Size() (n int) {
	var l int
	_ = l
	if m.Namespace != nil {
		n += 1 + sovXattr(uint64(*m.Namespace))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovXattr(uint64(l))
	}
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovXattr(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XAttrEditLogProto) Size() (n int) {
	var l int
	_ = l
	if m.Src != nil {
		l = len(*m.Src)
		n += 1 + l + sovXattr(uint64(l))
	}
	if len(m.XAttrs) > 0 {
		for _, e := range m.XAttrs {
			l = e.Size()
			n += 1 + l + sovXattr(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetXAttrRequestProto) Size() (n int) {
	var l int
	_ = l
	if m.Src != nil {
		l = len(*m.Src)
		n += 1 + l + sovXattr(uint64(l))
	}
	if m.XAttr != nil {
		l = m.XAttr.Size()
		n += 1 + l + sovXattr(uint64(l))
	}
	if m.Flag != nil {
		n += 1 + sovXattr(uint64(*m.Flag))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetXAttrResponseProto) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetXAttrsRequestProto) Size() (n int) {
	var l int
	_ = l
	if m.Src != nil {
		l = len(*m.Src)
		n += 1 + l + sovXattr(uint64(l))
	}
	if len(m.XAttrs) > 0 {
		for _, e := range m.XAttrs {
			l = e.Size()
			n += 1 + l + sovXattr(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetXAttrsResponseProto) Size() (n int) {
	var l int
	_ = l
	if len(m.XAttrs) > 0 {
		for _, e := range m.XAttrs {
			l = e.Size()
			n += 1 + l + sovXattr(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListXAttrsRequestProto) Size() (n int) {
	var l int
	_ = l
	if m.Src != nil {
		l = len(*m.Src)
		n += 1 + l + sovXattr(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListXAttrsResponseProto) Size() (n int) {
	var l int
	_ = l
	if len(m.XAttrs) > 0 {
		for _, e := range m.XAttrs {
			l = e.Size()
			n += 1 + l + sovXattr(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveXAttrRequestProto) Size() (n int) {
	var l int
	_ = l
	if m.Src != nil {
		l = len(*m.Src)
		n += 1 + l + sovXattr(uint64(l))
	}
	if m.XAttr != nil {
		l = m.XAttr.Size()
		n += 1 + l + sovXattr(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveXAttrResponseProto) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovXattr(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozXattr(x uint64) (n int) {
	return sovXattr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *XAttrProto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXattr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XAttrProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XAttrProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var v XAttrProto_XAttrNamespaceProto
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (XAttrProto_XAttrNamespaceProto(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Namespace = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXattr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXattr
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXattr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXattr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("namespace")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XAttrEditLogProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXattr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XAttrEditLogProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XAttrEditLogProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXattr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Src = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAttrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXattr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAttrs = append(m.XAttrs, &XAttrProto{})
			if err := m.XAttrs[len(m.XAttrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXattr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXattr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetXAttrRequestProto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXattr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetXAttrRequestProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetXAttrRequestProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXattr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Src = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXattr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XAttr == nil {
				m.XAttr = &XAttrProto{}
			}
			if err := m.XAttr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flag = &v
		default:
			iNdEx = preIndex
			skippy, err := skipXattr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXattr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("src")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetXAttrResponseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXattr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetXAttrResponseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetXAttrResponseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipXattr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXattr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetXAttrsRequestProto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXattr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetXAttrsRequestProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetXAttrsRequestProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXattr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Src = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAttrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXattr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAttrs = append(m.XAttrs, &XAttrProto{})
			if err := m.XAttrs[len(m.XAttrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXattr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXattr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("src")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetXAttrsResponseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXattr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetXAttrsResponseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetXAttrsResponseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAttrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXattr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAttrs = append(m.XAttrs, &XAttrProto{})
			if err := m.XAttrs[len(m.XAttrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXattr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXattr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListXAttrsRequestProto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXattr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListXAttrsRequestProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListXAttrsRequestProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXattr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Src = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipXattr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXattr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("src")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListXAttrsResponseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXattr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListXAttrsResponseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListXAttrsResponseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAttrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXattr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAttrs = append(m.XAttrs, &XAttrProto{})
			if err := m.XAttrs[len(m.XAttrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXattr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXattr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveXAttrRequestProto) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXattr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveXAttrRequestProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveXAttrRequestProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXattr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Src = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXattr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XAttr == nil {
				m.XAttr = &XAttrProto{}
			}
			if err := m.XAttr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXattr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXattr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("src")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveXAttrResponseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXattr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveXAttrResponseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveXAttrResponseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipXattr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXattr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXattr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXattr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXattr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthXattr
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowXattr
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipXattr(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthXattr = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXattr   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("xattr.proto", fileDescriptorXattr) }

var fileDescriptorXattr = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0xb1, 0xd3, 0xfd, 0xe9, 0x49, 0x87, 0x3c, 0xb3, 0xad, 0x11, 0x17, 0x55, 0x64, 0x09,
	0x29, 0x1a, 0x22, 0x48, 0xbb, 0xe2, 0x36, 0x2b, 0x06, 0x15, 0x15, 0x98, 0x9c, 0x14, 0xb6, 0xdd,
	0x20, 0xab, 0xf5, 0xda, 0x89, 0x6e, 0x0e, 0xb1, 0x37, 0xed, 0x71, 0x78, 0x1c, 0x2e, 0x11, 0x4f,
	0x80, 0xfa, 0x24, 0x28, 0x4e, 0x47, 0x32, 0xc4, 0x9f, 0x21, 0xb8, 0xfb, 0xec, 0xf3, 0xf9, 0x77,
	0x3e, 0x9f, 0x38, 0xe0, 0x5f, 0x49, 0x6b, 0x8b, 0x38, 0x2f, 0xb4, 0xd5, 0xd4, 0x9f, 0xc9, 0x89,
	0xd6, 0x79, 0x3c, 0x9b, 0x9c, 0x18, 0xf6, 0x05, 0x01, 0x1c, 0x26, 0xd6, 0x16, 0x07, 0xae, 0x36,
	0x80, 0xf6, 0xb9, 0x3c, 0x53, 0x26, 0x97, 0x63, 0x15, 0xa0, 0x10, 0x47, 0x77, 0xf7, 0x1e, 0xc6,
	0x0d, 0x7f, 0x5c, 0x7b, 0x2b, 0xf9, 0xea, 0xda, 0xed, 0xf6, 0x44, 0x7d, 0x9a, 0x52, 0x68, 0x95,
	0x8b, 0x00, 0x87, 0x38, 0x6a, 0x0b, 0xa7, 0xe9, 0x16, 0xac, 0x5c, 0xca, 0xf9, 0x85, 0x0a, 0xbc,
	0x10, 0x45, 0x1d, 0x51, 0x2d, 0xd8, 0x6b, 0xb8, 0xf7, 0x13, 0x16, 0x5d, 0x87, 0xd6, 0x28, 0xe5,
	0x82, 0xdc, 0xa1, 0x3e, 0xac, 0x65, 0x62, 0x94, 0x66, 0xfc, 0x29, 0x41, 0xb4, 0x03, 0xeb, 0x29,
	0xef, 0x8f, 0xc4, 0x20, 0x3b, 0x22, 0x98, 0x02, 0xac, 0xa6, 0x47, 0x69, 0xc6, 0x5f, 0x12, 0x8f,
	0xae, 0x81, 0x27, 0x92, 0xb7, 0xa4, 0xc5, 0xde, 0xc0, 0xa6, 0x03, 0xf2, 0xc9, 0xa9, 0x1d, 0xea,
	0x69, 0x85, 0x23, 0xe0, 0x99, 0x62, 0x1c, 0xa0, 0x10, 0x45, 0x6d, 0x51, 0x4a, 0xfa, 0x18, 0x56,
	0xaf, 0x4a, 0x9b, 0x09, 0x70, 0xe8, 0x45, 0xfe, 0x5e, 0xf7, 0x17, 0x37, 0x15, 0x4b, 0x1b, 0x7b,
	0x0f, 0x5b, 0xa9, 0xb2, 0xae, 0x20, 0xd4, 0x87, 0x0b, 0x65, 0xec, 0x0f, 0x68, 0x7c, 0x8d, 0x7e,
	0x04, 0x2b, 0xee, 0x4c, 0x80, 0x43, 0xf4, 0x3b, 0x72, 0xe5, 0x2a, 0x67, 0x75, 0x32, 0x97, 0x53,
	0x37, 0x96, 0x0d, 0xe1, 0x34, 0xeb, 0xc2, 0x76, 0xdd, 0xcc, 0xe4, 0xfa, 0xdc, 0x54, 0x73, 0x61,
	0xc7, 0xb0, 0xfd, 0x7c, 0x59, 0x30, 0x7f, 0x88, 0xf1, 0xd7, 0x37, 0x1c, 0xc0, 0x4e, 0x83, 0xdd,
	0xe8, 0xda, 0x40, 0xa1, 0xdb, 0xa1, 0x76, 0x61, 0x67, 0x78, 0x6a, 0x6e, 0x95, 0x93, 0xbd, 0x80,
	0x6e, 0xd3, 0xfb, 0x4f, 0x7d, 0x8f, 0xa1, 0x2b, 0xd4, 0x99, 0xbe, 0x54, 0xff, 0xff, 0x3b, 0xb1,
	0xfb, 0x10, 0xdc, 0x60, 0x37, 0x82, 0xee, 0x3e, 0x59, 0x3e, 0xba, 0x54, 0xd9, 0x67, 0x73, 0xf9,
	0xfd, 0xd1, 0x75, 0x0e, 0x93, 0x2c, 0x13, 0xef, 0xfa, 0x82, 0x27, 0x19, 0x27, 0x88, 0x6e, 0xc2,
	0x46, 0xb5, 0x23, 0xf8, 0xc1, 0x30, 0xe9, 0x73, 0x82, 0xf7, 0xfb, 0x9f, 0x16, 0x3d, 0xf4, 0x79,
	0xd1, 0x43, 0x5f, 0x17, 0x3d, 0x04, 0x0f, 0x74, 0x31, 0x8d, 0x65, 0x2e, 0xc7, 0x33, 0x75, 0x23,
	0x8d, 0xfb, 0x79, 0xc7, 0x7a, 0x5e, 0x89, 0x7d, 0xbf, 0x4e, 0x67, 0x3e, 0x22, 0xf4, 0x2d, 0x00,
	0x00, 0xff, 0xff, 0xef, 0x1d, 0x1f, 0x0f, 0xe3, 0x03, 0x00, 0x00,
}
